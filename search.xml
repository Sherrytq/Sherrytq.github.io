<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/11/06/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
      <url>/2018/11/06/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>面试</p><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106111612856.png" alt="image-20181106111612856"></p><ol><li><p>Float 实现</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"layout float"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"left-right-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>浮动解决方案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      这是中间</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> * &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span> <span class="selector-tag">article</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*浮动解决方案*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.float</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.float</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.float</span> <span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Absolute 布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"layout absolute"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"left-center-right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>绝对定位解决方案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      这是中间</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.absolute</span> <span class="selector-class">.left-center-right</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.absolute</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.absolute</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.absolute</span> <span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Flexbox 布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"layout flexbox"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"left-center-right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>绝对定位解决方案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      这是中间</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.flexbox</span> <span class="selector-class">.left-center-right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.flexbox</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.flexbox</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.flexbox</span> <span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>table 布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"layout table"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"left-center-right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>table解决方案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      这是中间</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.left-center-right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.left-center-right</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>table </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"layout grid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"left-center-right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网格解决方案<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      这是中间</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*grid解决方案*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.left-center-right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">300px</span> auto <span class="number">300px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span><span class="selector-class">.table</span> <span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="CSS-盒模型"><a href="#CSS-盒模型" class="headerlink" title="CSS 盒模型"></a>CSS 盒模型</h2><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106230216977.png" alt="image-20181106230216977"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106230252811.png" alt="image-20181106230252811"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106230456343.png" alt="image-20181106230456343"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106231006123.png" alt="image-20181106231006123"></p><h2 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h2><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106231717935.png" alt="image-20181106231717935"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106231732710.png" alt="image-20181106231732710"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106231814001.png" alt="image-20181106231814001"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106231825343.png" alt="image-20181106231825343"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106233755758.png" alt="image-20181106233755758"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106233807312.png" alt="image-20181106233807312"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181106234038369.png" alt="image-20181106234038369"></p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>跨域</p><p>前后端</p><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>cors</p><p>rss</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Promise</title>
      <link href="/2018/10/30/Promise/"/>
      <url>/2018/10/30/Promise/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise-是什么"><a href="#Promise-是什么" class="headerlink" title="Promise 是什么"></a>Promise 是什么</h2><p><em>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理，让开发者不用再关注于时序和底层的结果。Promise的状态具有不受外界影响和不可逆两个特点。</em></p><h2 id="Promise-与传统的有什么区别"><a href="#Promise-与传统的有什么区别" class="headerlink" title="Promise 与传统的有什么区别"></a>Promise 与传统的有什么区别</h2><p>传统的回调有五大信任问题：</p><ol><li>调用回调太早</li><li>调用回调过晚（或没有被调用）</li><li>调用回调次数过少或过多</li><li>未能传递所需的环境和参数</li><li>吞掉可能出现的错误和异常</li></ol><h2 id="Promise-中的异步模式有哪些"><a href="#Promise-中的异步模式有哪些" class="headerlink" title="Promise 中的异步模式有哪些"></a>Promise 中的异步模式有哪些</h2><ul><li>Promise.all()  会将传入的数组中的所有promise全部决议以后，将决议值以数组的形式传入到观察回调中，任何一个promise决议为拒绝，那么就会调用拒绝回调。</li><li>Promise.race() 会将传入的数组中的所有promise中第一个决议的决议值传递给观察回调，即使决议结果是拒绝。</li></ul><h2 id="Promise是如何捕获异常的？与传统的try-catch相比有什么优势？"><a href="#Promise是如何捕获异常的？与传统的try-catch相比有什么优势？" class="headerlink" title="Promise是如何捕获异常的？与传统的try/catch相比有什么优势？"></a>Promise是如何捕获异常的？与传统的try/catch相比有什么优势？</h2><ul><li>传统的try/catch捕获异常方式是无法捕获异步的异常的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
            <tag> es6 </tag>
            
            <tag> vue </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端图片滚动优化</title>
      <link href="/2018/10/25/%E6%BB%9A%E5%8A%A8%E4%BC%98%E5%8C%96/"/>
      <url>/2018/10/25/%E6%BB%9A%E5%8A%A8%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>原因是如果当你滚动时，有可能在多层导致大面积的内容调整，这会导致大量的绘制工作。</p><h2 id="分页加载"><a href="#分页加载" class="headerlink" title="分页加载"></a>分页加载</h2><p>把一个列表分成很多很多页，我一开始只给你显示若干页(N)，当我往下滚动到底部的时候，显示下一页，同时把最上面那一页移除。</p><p>同样道理，往上滚动时则显示上一页，同时把最下面那一页移除。这样，显示的就永远只有N页，dom节点也就永远只有Nx25个。</p><h2 id="滚动事件"><a href="#滚动事件" class="headerlink" title="滚动事件"></a>滚动事件</h2><h3 id="滚动与页面渲染的关系"><a href="#滚动与页面渲染的关系" class="headerlink" title="滚动与页面渲染的关系"></a>滚动与页面渲染的关系</h3><h3 id="节流与防抖"><a href="#节流与防抖" class="headerlink" title="节流与防抖"></a>节流与防抖</h3><ul><li><p>防抖动：防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。<strong>每隔一段时间，执行一次</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的防抖动函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 定时器变量</span></span><br><span class="line">    <span class="keyword">var</span> timeout;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 每次触发 scroll handler 时先清除定时器</span></span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        <span class="comment">// 指定 xx ms 后触发真正想进行的操作 handler</span></span><br><span class="line">        timeout = setTimeout(func, wait);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 实际想绑定在 scroll 事件上的 handler</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">realFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Success"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 采用了防抖动</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,debounce(realFunc,<span class="number">500</span>));</span><br></pre></td></tr></table></figure></li><li><p>节流函数：只允许一个函数在 X 毫秒内执行一次，只有当上一次函数执行后过了你规定的时间间隔，才能进行下一次该函数的调用。<strong>在规定时间内，至少执行一次</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的节流函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait, mustRun</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeout,</span><br><span class="line">        startTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">this</span>,</span><br><span class="line">            args = <span class="built_in">arguments</span>,</span><br><span class="line">            curTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"> </span><br><span class="line">        clearTimeout(timeout);</span><br><span class="line">        <span class="comment">// 如果达到了规定的触发时间间隔，触发 handler</span></span><br><span class="line">        <span class="keyword">if</span>(curTime - startTime &gt;= mustRun)&#123;</span><br><span class="line">            func.apply(context,args);</span><br><span class="line">            startTime = curTime;</span><br><span class="line">        <span class="comment">// 没达到触发间隔，重新设定定时器</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            timeout = setTimeout(func, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实际想绑定在 scroll 事件上的 handler</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">realFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Success"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 采用了节流函数</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,throttle(realFunc,<span class="number">500</span>,<span class="number">1000</span>));</span><br></pre></td></tr></table></figure></li></ul><ul><li>rAF：16.7ms 触发一次 handler，降低了可控性，但是提升了性能和精确度。</li></ul><h3 id="pointer-events-none-优化滚动"><a href="#pointer-events-none-优化滚动" class="headerlink" title="pointer-events:none 优化滚动"></a>pointer-events:none 优化滚动</h3><h3 id="浏览器的渲染原理"><a href="#浏览器的渲染原理" class="headerlink" title="浏览器的渲染原理"></a>浏览器的渲染原理</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/coco1s/p/5499469.html" target="_blank" rel="noopener">高性能滚动 scroll 及页面渲染优化</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
            <tag> es6 </tag>
            
            <tag> vue </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端乱炖_02</title>
      <link href="/2018/10/21/%E5%89%8D%E7%AB%AF%E4%B9%B1%E7%82%96_02/"/>
      <url>/2018/10/21/%E5%89%8D%E7%AB%AF%E4%B9%B1%E7%82%96_02/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h3 id="模块化使用和编译环境"><a href="#模块化使用和编译环境" class="headerlink" title="模块化使用和编译环境"></a>模块化使用和编译环境</h3><ul><li><p>模块化的基本语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*util.js*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="attr">a</span>: <span class="number">100</span>&#125;</span><br><span class="line"><span class="comment">/*index.js*/</span></span><br><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">'./util.js'</span></span><br></pre></td></tr></table></figure></li><li><p>开发环境配置</p><p>编译<code>babel</code> 编译es6语法</p><p>模块化可以用webpack 和 rollup , gulp</p></li><li><p>关于js 众多模块化的标准 </p><ul><li>AMD  require.js </li><li>CMD</li><li>ES6 </li></ul></li></ul><h3 id="Class-与普通构造函数的区别"><a href="#Class-与普通构造函数的区别" class="headerlink" title="Class 与普通构造函数的区别"></a>Class 与普通构造函数的区别</h3><ul><li><p>js 构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MathHandle</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line">MathHandle.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> MathHandle(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.add())</span><br></pre></td></tr></table></figure></li><li><p>class 基本语法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathHandle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x, y)&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    add()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> MathHandle(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.add());</span><br></pre></td></tr></table></figure></li><li><p>语法糖 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> MathHandle <span class="comment">//function</span></span><br><span class="line">MathHandle === MathHandle.prototyope.constructor <span class="comment">//true</span></span><br><span class="line">m.__proto__ === MathHandle.protitype <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*构造函数继承*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'animal eat'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//狗</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'dog bark'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal() ;</span><br><span class="line"><span class="comment">//哈士奇</span></span><br><span class="line"><span class="keyword">var</span> hashiqi = <span class="keyword">new</span> Dog()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*ES6 继承*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    say()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> say`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">'哈士奇'</span>)；</span><br><span class="line">dog.say();</span><br><span class="line">dog.eat();</span><br></pre></td></tr></table></figure></li><li><p>区别</p><ul><li>class 在语法上更加贴合面向对象的写法</li><li>class 实现继承更加易读、易理解</li><li>本质还是语法糖，使用prototype</li></ul></li></ul><h3 id="Promise-的用法"><a href="#Promise-的用法" class="headerlink" title="Promise 的用法"></a>Promise 的用法</h3><ul><li><p>Callback hell </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src, callback, fail</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        callback(img)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        fail()</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = src</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> src = <span class="string">'http://xxx.png'</span></span><br><span class="line">loadImg(src, <span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'failed'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Promise 语法*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(img)</span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            reject()</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = src;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> src = <span class="string">'http://xxx.png'</span>;</span><br><span class="line"><span class="keyword">var</span> result = loadImg(src);</span><br><span class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">img </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width)</span><br><span class="line">&#125;), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.height);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>总结</p><ul><li>new Promise 实例，而且要return</li><li>new Promise 时要传入函数，函数有resolve reject 两个参数</li><li>成功时执行resolve()  失败时执行reject()</li><li>then 监听结果</li></ul></li></ul><h3 id="ES6-其他常用功能"><a href="#ES6-其他常用功能" class="headerlink" title="ES6 其他常用功能"></a>ES6 其他常用功能</h3><ul><li><p>let/const</p><p>const 定义的不能更改</p></li><li><p>多行字符串/模板变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'zhangsan'</span>, age = <span class="number">20</span>, html = <span class="string">''</span>;</span><br><span class="line">html += <span class="string">'&lt;div&gt;'</span>;</span><br><span class="line">html += <span class="string">'&lt;p&gt;'</span>+name + <span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line">html += <span class="string">'&lt;p&gt;'</span>+age + <span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line">html += <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'zhangsan'</span>, age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> html = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;<span class="subst">$&#123;name&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;<span class="subst">$&#123;age&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;`</span>;</span><br></pre></td></tr></table></figure></li><li><p>解构赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JS</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> a = obj.a;</span><br><span class="line"><span class="keyword">var</span> b = obj.b</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'xxx'</span>,<span class="string">'yyy'</span>];</span><br><span class="line"><span class="keyword">var</span> x = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>:<span class="number">20</span>,<span class="attr">c</span>:<span class="number">30</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;a,c&#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'xxx'</span>,<span class="string">'yyy'</span>,<span class="string">'zzz'</span>];</span><br><span class="line"><span class="keyword">const</span> [x,y,z] = arr</span><br></pre></td></tr></table></figure></li><li><p>块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> obj =&#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item) <span class="comment">//'b'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> obj =&#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li><p>函数默认参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="literal">null</span>)&#123;</span><br><span class="line">        b = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a,b=<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>箭头函数（解决this指向，函数体最近的变量）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item +<span class="number">1</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>);</span><br><span class="line">arr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index)</span><br><span class="line">    <span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">&#125; )</span><br></pre></td></tr></table></figure></li></ul><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><h3 id="什么是单线程，-与异步关系"><a href="#什么是单线程，-与异步关系" class="headerlink" title="什么是单线程， 与异步关系"></a>什么是单线程， 与异步关系</h3><ul><li>单线程，只有一个线程，只能做一件事</li><li>原因： 避免DOM 渲染冲突</li><li>解决方案：异步</li><li>实现方式： event-loop</li></ul><h3 id="什么是event-loop（事件轮询）"><a href="#什么是event-loop（事件轮询）" class="headerlink" title="什么是event-loop（事件轮询）"></a>什么是event-loop（事件轮询）</h3><ul><li>Js 实现异步的具体解决方案</li><li>同步代码，直接执行</li><li>异步函数先放在异步队列中</li><li>待同步函数执行完步，轮询执行异步队列的函数</li></ul><h3 id="如果只有jquery如何解决异步-deferred"><a href="#如果只有jquery如何解决异步-deferred" class="headerlink" title="如果只有jquery如何解决异步(deferred)"></a>如果只有jquery如何解决异步(deferred)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dtd = $.Deferred() <span class="comment">//创建一个deferred 对象</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>)；</span><br><span class="line">        dtd.resolve() <span class="comment">//表示异步任务已经完成</span></span><br><span class="line">      <span class="comment">//dtd.reject(); //表示异步任务失败或者出错</span></span><br><span class="line">      &#125;</span><br><span class="line">      setTimeout(task，<span class="number">2000</span>)；</span><br><span class="line">      <span class="keyword">return</span> dtd;<span class="comment">// 要求返回deferred 对象</span></span><br><span class="line">     <span class="comment">// return dtd.promise(); //这里返回promise 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意一定要有返回值</span></span><br><span class="line">    <span class="keyword">return</span> wait(dtd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> w = waitHandle();</span><br><span class="line">w.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok 1'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err 1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok 2'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err 2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//还有w.done w.fail  开源封闭原则</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dtd = $.Deferred() <span class="comment">//创建一个deferred 对象</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>)；</span><br><span class="line">        dtd.resolve() <span class="comment">//表示异步任务已经完成</span></span><br><span class="line">      <span class="comment">//dtd.reject(); //表示异步任务失败或者出错</span></span><br><span class="line">      &#125;</span><br><span class="line">      setTimeout(task，<span class="number">2000</span>)；</span><br><span class="line">      <span class="keyword">return</span> dtd.promise(); <span class="comment">//**这里返回promise 对象**</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意一定要有返回值</span></span><br><span class="line">    <span class="keyword">return</span> wait(dtd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> w = waitHandle();</span><br><span class="line">$.when(w)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok 1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ok 2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//w.reject() //执行这句会直接报错</span></span><br></pre></td></tr></table></figure><ul><li>总结<ul><li>dtd 的API 分为两类, 两类应该分开，否则后果严重，所以引入promise 对象只有第二类方式，不能直接用第一类<ul><li>dtd.resolve()   dtd.reject()</li><li>dtd.then()   dtd.done()  dtd.fail()</li></ul></li></ul></li></ul><h3 id="Promise-的基本使用和原理"><a href="#Promise-的基本使用和原理" class="headerlink" title="Promise 的基本使用和原理"></a>Promise 的基本使用和原理</h3><ul><li><p>基本语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Promise 语法*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">        <span class="comment">//throw new Error('自定义错误)</span></span><br><span class="line">        img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(img)</span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            reject(<span class="string">'图片加载失败'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        img.src = src;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> src = <span class="string">'http://xxx.png'</span>;</span><br><span class="line"><span class="keyword">var</span> result = loadImg(src);</span><br><span class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">img </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width)</span><br><span class="line">&#125;), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.heig ht);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>异常捕获（Error 和 reject都要考虑）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//规定: them 只接受一个参数，最后统一用catch 捕获异常</span></span><br><span class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">img </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">ex</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//最后统一catch</span></span><br><span class="line">    <span class="built_in">console</span>.log(ex);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>多个串联</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> src1= <span class="string">'http://xxx.png'</span>;</span><br><span class="line"><span class="keyword">var</span> result1 = loadImg(src1);</span><br><span class="line"><span class="keyword">var</span> src2= <span class="string">'http://xxx.png'</span>;</span><br><span class="line"><span class="keyword">var</span> result2 = loadImg(src2);</span><br><span class="line"></span><br><span class="line">result1.then(<span class="function"><span class="keyword">function</span>(<span class="params">img </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第一个图片加载完成'</span>);</span><br><span class="line">    <span class="keyword">return</span> result2;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">img </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第二个图片加载完成'</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">ex</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//最后统一catch</span></span><br><span class="line">    <span class="built_in">console</span>.log(ex);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Promise.all 和 Promise.race</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise.all 接收一个promise 对象的数组</span></span><br><span class="line"><span class="comment">//待全部完成之后，统一执行success</span></span><br><span class="line"><span class="built_in">Promise</span>.all([result1,result2]).then(<span class="function"><span class="params">datas</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//接收都的datas 是一个数组，一次包含多个promise返回的内容</span></span><br><span class="line">    <span class="built_in">console</span>.log(datas[<span class="number">0</span>]);</span><br><span class="line">    consoel.log(datas[<span class="number">1</span>]);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise.race 接收一个包含多个promise 对象的数组</span></span><br><span class="line"><span class="comment">//只要有一个完成，就执行success </span></span><br><span class="line"><span class="built_in">Promise</span>.race([result1,result2]).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//data 即最先执行完成的promise的返回值</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Promise 的标准</p><ul><li>状态变化<ul><li>三种状态： pending fulfilled rejected</li><li>初始状态是pending </li><li>pending 变为fulfilled, 或者pending 变为rejected</li><li>状态变化不可逆</li></ul></li></ul></li></ul><h3 id="async-await-的使用"><a href="#async-await-的使用" class="headerlink" title="async/await 的使用"></a>async/await 的使用</h3><ul><li><p>then 只是将callback 拆分了</p></li><li><p>Async /await 是最直接的同步写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> load = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = <span class="keyword">await</span> loadImg(src1);</span><br><span class="line">    <span class="built_in">console</span>.log(result1);</span><br><span class="line">    <span class="keyword">const</span> result2 = <span class="keyword">await</span> loadImg(src2);</span><br><span class="line">    <span class="built_in">console</span>.log(result2);</span><br><span class="line">&#125;</span><br><span class="line">load();</span><br></pre></td></tr></table></figure></li><li><p>用法</p><ul><li>使用await , 函数必须用async 标识</li><li>await 后面跟的是一个Promise 实例</li><li>需要babel-polyfill</li></ul></li></ul><h3 id="当前异步的解决方案"><a href="#当前异步的解决方案" class="headerlink" title="当前异步的解决方案"></a>当前异步的解决方案</h3><ul><li>jQuery Deferred</li><li>Promise</li><li>Async/awit</li><li>Generator </li></ul><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="原型的实际应用"><a href="#原型的实际应用" class="headerlink" title="原型的实际应用"></a>原型的实际应用</h3><ul><li><p>jquey简单使用</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181021223952726.png" alt="image-20181021223952726"></p></li><li><p>jquery 如何使用原型</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181021224301010.png" alt="image-20181021224301010"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181021224551664.png" alt="image-20181021224551664"></p><p><strong>为什么把原型方法放在$.fn？</strong></p><p>因为要扩展插件比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.fn.getNodeName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>].nodeName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只有$ 会暴露在window 全局变量</li><li>将插件扩展统一到$.fn.xxx 这一个接口，方便使用</li></ul></li></ul><h2 id="Virtual-Dom"><a href="#Virtual-Dom" class="headerlink" title="Virtual Dom"></a>Virtual Dom</h2><h3 id="什么是vdom-为何要用vdom"><a href="#什么是vdom-为何要用vdom" class="headerlink" title="什么是vdom,为何要用vdom"></a>什么是vdom,为何要用vdom</h3><ul><li><p>虚拟dom 用js 模拟DOM 结构</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022103236641.png" alt="image-20181022103236641"></p></li><li><p>dom 变化的对比，放在js 层来做</p></li><li><p>提高重绘性能</p></li><li><p>遇到的问题</p><ul><li>Dom 操作是’昂贵‘的，js 运行效率高</li><li>尽量减少Dom 操作</li></ul></li></ul><h3 id="vdom-如何使用，核心函数有哪些"><a href="#vdom-如何使用，核心函数有哪些" class="headerlink" title="vdom 如何使用，核心函数有哪些"></a>vdom 如何使用，核心函数有哪些</h3><ul><li>snabbdom </li><li>核心API</li></ul><h3 id="了解diff-算法"><a href="#了解diff-算法" class="headerlink" title="了解diff 算法"></a>了解diff 算法</h3><ul><li><p>什么是diff 算法</p></li><li><p>Vdom 为何用diff 算法</p><ul><li>Dom 操作是’昂贵‘的，尽量减少Dom 操作 </li><li>找出本次DOM必须更新的节点来更新，其他的不更新</li><li>‘找出’的过程，就是diff 算法</li></ul></li><li><p>diff 算法的实现流程 </p><ul><li>patch(container,vnode)</li><li><p>patch(vcode,newVcode)</p></li><li><p>主要需要解决问题： </p><ul><li>节点的新增和删除  </li><li>节点的重新排序</li><li>节点属性、样式、事件绑定</li><li>性能优化</li></ul></li></ul></li></ul><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h3 id="之前使用jquery-和-现在使用Vue-或-react-框架的区别"><a href="#之前使用jquery-和-现在使用Vue-或-react-框架的区别" class="headerlink" title="之前使用jquery 和 现在使用Vue 或 react 框架的区别"></a>之前使用jquery 和 现在使用Vue 或 react 框架的区别</h3><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022120649087.png" alt="image-20181022120649087"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022120829082.png" alt="image-20181022120829082"></p><ul><li>jQuery 和 vue 的区别<ul><li>数据和视图的分离，对扩展开放，对修改封闭</li><li>以数据驱动视图，只关心数据变化，dom 操作被封装</li></ul></li></ul><h3 id="如何理解MVVM"><a href="#如何理解MVVM" class="headerlink" title="如何理解MVVM"></a>如何理解MVVM</h3><ul><li><p>MVC</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022122129775.png" alt="image-20181022122129775"></p></li><li><p>MVVM</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022122414997.png" alt="image-20181022122414997"></p></li><li><p>MVVM 框架的三大要素</p><ul><li>响应式：vue 如何监听到data 的每个属性变化</li><li>模板引擎： vue 的模板如何被解析，指令如何处理</li><li>渲染 ： vue 的模板如何被渲染成html，以及渲染的过程</li></ul></li></ul><h3 id="vue-如何实现响应式"><a href="#vue-如何实现响应式" class="headerlink" title="vue 如何实现响应式"></a>vue 如何实现响应式</h3><ul><li><p>什么是响应式</p><ul><li>修改data 属性后，vue 立刻监听到</li><li>Data 属性被代理到vm 上</li></ul></li><li><p>Object.defineProperty</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022123640285.png" alt="image-20181022123640285"></p></li><li><p>模拟</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022124056094.png" alt="image-20181022124056094"></p></li></ul><h3 id="vue-如何解析模板"><a href="#vue-如何解析模板" class="headerlink" title="vue 如何解析模板"></a>vue 如何解析模板</h3><ul><li><p>模板是什么</p><ul><li>本质： 字符串</li><li>有逻辑 如 v-if v-for </li><li>与Html 格式很像，但有很大的区别</li><li>最终还是转换为html 来显示</li><li>模板最终转换成js 代码（render 函数）</li></ul></li><li><p>render 函数</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022125142467.png" alt="image-20181022125142467"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022125233721.png" alt="image-20181022125233721"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022125338958.png" alt="image-20181022125338958"></p></li><li><p>render 函数与vdom</p></li></ul><h3 id="介绍vue-的实现流程"><a href="#介绍vue-的实现流程" class="headerlink" title="介绍vue 的实现流程"></a>介绍vue 的实现流程</h3><ul><li><p>解析模板成render 函数</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022133631422.png" alt="image-20181022133631422"></p></li><li><p>响应式开始监听</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022133701966.png" alt="image-20181022133701966"></p></li><li><p>首次渲染，显示页面，且绑定依赖</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022133801115.png" alt="image-20181022133801115"></p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022133925483.png" alt="image-20181022133925483"></p></li><li><p>data 属性变化，触发render  </p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022134044690.png" alt="image-20181022134044690"></p></li></ul><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><h3 id="对组件化的理解"><a href="#对组件化的理解" class="headerlink" title="对组件化的理解"></a>对组件化的理解</h3><ul><li>组件的封装<ul><li>视图</li><li>数据</li><li>变化逻辑（数据驱动视图变化）</li></ul></li><li>组件的复用<ul><li>props 传递</li><li>复用 </li></ul></li></ul><h3 id="jsx-是什么"><a href="#jsx-是什么" class="headerlink" title="jsx 是什么"></a>jsx 是什么</h3><ul><li><p>JSX 语法</p></li><li><p>JSX解析成JS</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022140225064.png" alt="image-20181022140225064"></p></li><li><p>独立的标准 </p></li></ul><h3 id="jsx-和-vdom-是什么关系"><a href="#jsx-和-vdom-是什么关系" class="headerlink" title="jsx 和 vdom 是什么关系"></a>jsx 和 vdom 是什么关系</h3><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022140605423.png" alt="image-20181022140605423"></p><h3 id="简述react-的setState"><a href="#简述react-的setState" class="headerlink" title="简述react 的setState"></a>简述react 的setState</h3><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022140707964.png" alt="image-20181022140707964"></p><h3 id="阐述自己如何比较React-和vue"><a href="#阐述自己如何比较React-和vue" class="headerlink" title="阐述自己如何比较React 和vue"></a>阐述自己如何比较React 和vue</h3><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181022140932562.png" alt="image-20181022140932562"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
            <tag> es6 </tag>
            
            <tag> vue </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链</title>
      <link href="/2018/10/21/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
      <url>/2018/10/21/%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>加密的分布式记账技术。</li><li>现行的中心式记账对立 缺点<ul><li>中介机构信任缺失</li><li>数据库缺少备份或缺少足够的备份</li></ul></li><li><p>分布式记账</p><ul><li>每笔交易发生时要向全网广播，拓扑网络中，每一个节点都是一个小的加密数据库，信息透明，重塑世界信任机制</li><li>去第三方化，即不需要第三方机构，可以极大节省人力物力成本。</li></ul></li><li><p>奖励机制：<br>拓扑网络中的计算机并不是无偿工作的，奖励机制鼓励这些计算机进行记账。拓扑网络中的计算机通过进行运算进行解题，最先得出正确结果的计算机获得奖励。网络中的计算机依靠运算能力和运算速度进行竞争，胜者获得数字货币奖励，在这种奖励制度的激励下，更多的计算机加入网络，由此巩固了该网络的稳定性与安全性。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>复盘</title>
      <link href="/2018/10/21/%E5%A4%8D%E7%9B%98/"/>
      <url>/2018/10/21/%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="USTOSHOP"><a href="#USTOSHOP" class="headerlink" title="USTOSHOP"></a>USTOSHOP</h2><ul><li>时间：2018.08 - 2018.09</li></ul><p>Ustoshop 是一个做区块链数字货币的企业，总部在美国洛杉矶，旗下的网站包括电商、物流和数字货币等。一开始也是因为是一家做区块链的网站，所以想去看看，工作不易，技术不佳，一开始的时候也是做了一段时间的测试，哎，测试真的不太适合我，每天的测试工作，差不多包括写测试案例，测各大网站的功能等，每天都很无奈，此时最大的感触可能就是，以后做开发，一定减少Bug 数量，测试还是很不容易的，要和气生财。</p><p>期间也会跟着产品接触一些产品的业务，不过因为一些公司整合原因，产品市场这块整体移交，所以也没有接触很多，印象最深的一次可能是跟纽约的人进行一次视频会议，输了输了，居然没有化妆就开始进行视频会议，输了输了</p><p>之后我开始接触一些界面的开发工作， 一开始并没有让我接触逻辑块的业务处理，之后因为一系列原因开始让我做逻辑这块，这里就跟在饿了么实习一样，每次都是临危受命，饿了么那次以为老大要离职，要求我再2周之内熟悉React + redux 的相关知识，并可以进行独立开发，这次也是因为之前的人的效率问题，导致模块没法按时上线，所以又临时让我接受别人的工作，短期内实现上线，当然这是决策层方面需要考虑的问题。</p><p>公司的电商、物流和数字货币的前端框架是angular, 这个框架感觉国外的企业用的比较多，国内不太多，弱弱的表示期间也学了点，并且帮那里的开发人员也解决了些许问题。而我之后要负责的模块是单点登录模块(SSO, Single Sign On) , 所用到的技术包括: cas,node.js , jquery ,  原生js, total.js 等。主要的任务包括: 用户的注册、登录以及其他的一些密码的处理。</p><p>主要的技术难点可能是一开始的架构比较乱，导致很多的东西实现都比预料的要复杂一点，而且因为项目的时间比较紧，需要在原来就比较乱的基础上修改代码，导致整个逻辑都比较混乱。另一方面 是利用cas 实现 sso模块，主要是后端的处理是拿不到前端的dom 结构，所以当后端返回结果时，需要在页面的再次进行处理，会导致代码比较混乱，当然这也是个熟悉过程。语言的切换也是利用 <code>total.js</code> 语法来实现的。</p><p>就前端展示部分，页面的自适应，因为之前没有做过所以一直是比较坑的一部分，目前是用的rem 进行页面的自适应，还有些部分没有做的很好。</p><p>还有就是其他一些乱七八糟的感谢：</p><ul><li><p>创业： (这是工作的时候写的，那会是写给一个打算创业的小伙伴的)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">感想</span><br><span class="line"></span><br><span class="line">关于创业公司</span><br><span class="line"></span><br><span class="line">一个公司的组成包括： 产品部， 市场部， 财务部， 人力部，it部</span><br><span class="line">产品部： 负责策划产品的逻辑</span><br><span class="line">市场部： 负责推广产品 （各种社交平台 ），以及偶尔的团队建设</span><br><span class="line">财务部： 负责公司资金的流转  (后方需要一个有钱的大佬）</span><br><span class="line">人力部： 负责公司的招聘 （不仅需要发布招聘的职位，还需要了解所在城市，国家的招聘政策）感觉1个人就可以了（初创的公司）</span><br><span class="line">It部：负责产品的研发 (人最多的部门）也是需要特别鼓励的部门（钱财的和未来期许的鼓励） </span><br><span class="line"></span><br><span class="line">其他的可能还包括一些算法工程师 ， 一些写专利（很重要！）， 一个拉赞助，拉钱财可以跟政府 银行等交道的人</span><br><span class="line"></span><br><span class="line">细说IT 部门</span><br><span class="line">设计部： （3人） 负责各个界面的UI </span><br><span class="line">后端： 负责数据库,  接口的生成</span><br><span class="line">前端： 负责页面的生成</span><br><span class="line"></span><br><span class="line">测试： 可以先不招，产品做的差不多了再招</span><br><span class="line"></span><br><span class="line">前期可能难招不到很好的工程师，但是能尽量好，还是尽量好，不然追进度的时候会比较麻烦。</span><br><span class="line"></span><br><span class="line">最好有个平台可以管理数据，特别是对于电商这种数据量比较大的平台，可以将复杂的数据整理出比较简单，通过平台管理后台数据，然后显示在界面上</span><br><span class="line"></span><br><span class="line">产品一开始，一定要想好，后来靠什么去运作，靠什么去盈利，怎么去维持。</span><br></pre></td></tr></table></figure></li></ul><p>还有一些乱七八糟的，找不到了。。。sang..</p><ul><li><p>区块链</p><p>这东西近些年比较流行，我主要的感官除了用在实现数字货币，也是想不出有什么用处，美国和香港都会有市场，但是国内有点迷，我也比较想知道一下国内区块链的市场在哪里</p></li></ul><h2 id="东方财富"><a href="#东方财富" class="headerlink" title="东方财富"></a>东方财富</h2><ul><li>时间： 2017.07 - 2017.06</li></ul><p>东方财富是毕业后的第一家公司，感恩比心。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目复盘 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack</title>
      <link href="/2018/10/17/webpack/"/>
      <url>/2018/10/17/webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p><strong>1.代码拆分</strong> Webpack 有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包。</p><p><strong>2.Loader</strong> Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。这样，任何资源都可以成为 Webpack 可以处理的模块。</p><p><strong>3.智能解析</strong> Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS 文件。</p><p><strong>4.插件系统</strong> Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack 插件，来满足各式各样的需求。</p><p><strong>5.快速运行</strong> Webpack 使用异步 I/O 和多级缓存提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>webpack解决了包与包之间潜在的循环依赖难题，同时，按需合并静态文件，以避免浏览器在网络取数阶段的并发瓶颈。除了打包，还可以进一步实现压缩（减少网络传输）和编译（ES6、JSX等语法向下兼容）的功能。</p><p>基于对webpack.config.js文件的配置，执行打包时的工作原理，可总结为：把页面逻辑当作一个整体，通过一个给定的入口文件，webpack从这个文件开始，找到所有的依赖文件，进行打包、编译、压缩，最后输出一个浏览器可识别的JS文件。</p><p>一个模块打包工具，第一步会从入口文件开始，对其进行依赖分析，第二步对其所有依赖再次递归进行依赖分析，第三步构建出模块的依赖图集，最后一步根据依赖图集使用CommonJS规范构建出最终的代码。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://juejin.im/post/5b38d27451882574d87aa5d5" target="_blank" rel="noopener">不聊webpack配置，来说说它的原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>跨域</title>
      <link href="/2018/10/16/%E8%B7%A8%E5%9F%9F/"/>
      <url>/2018/10/16/%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>同源策略限制以下几种行为</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 Js对象无法获得</li><li>AJAX 请求不能发送</li></ul><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><ul><li><p>通过jsonp跨域</p><ul><li><p>可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求，这就是jsonp的核心。</p><ul><li><p>首先在客户端注册一个callback, 然后把callback的名字传给服务器。</p></li><li><p>服务器先生成 json 数据。 然后以 javascript 语法的方式，生成一个function , function 名字就是传递上来的参数 jsonp. 最后将 json 数据直接以入参的方式，放置到 function 中，这样就生成了一段 js 语法的文档，返回给客户端。</p></li><li><p>客户端浏览器，解析script标签，并执行返回的 javascript 文档，此时数据作为参数，传入到了客户端预先定义好的 callback 函数里.（动态执行回调函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传参并指定回调执行函数为onBack</span></span><br><span class="line">    script.src = <span class="string">'http://www.domain2.com:8080/login?user=admin&amp;callback=onBack'</span>;</span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调执行函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onBack</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        alert(<span class="built_in">JSON</span>.stringify(res));</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Jquery 中 使用ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://www.domain2.com:8080/login'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">"onBack"</span>,    <span class="comment">// 自定义回调函数名</span></span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>缺点： 只能get 请求</p></li></ul></li><li><p>document.domain + iframe跨域</p><ul><li><p>此方案仅限主域相同，子域不同的跨域应用场景。</p><p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p></li></ul></li><li><p>location.hash + iframe</p></li><li><p>window.name + iframe跨域</p></li><li><p>postMessage跨域</p></li><li><p>跨域资源共享（CORS）</p><ul><li>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。</li></ul></li><li><p>nginx代理跨域</p></li><li><p>nodejs中间件代理跨域</p></li><li><p>WebSocket协议跨域</p></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">前端常见跨域解决方案（全）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端乱炖_01</title>
      <link href="/2018/10/15/%E5%89%8D%E7%AB%AF%E4%B9%B1%E7%82%96/"/>
      <url>/2018/10/15/%E5%89%8D%E7%AB%AF%E4%B9%B1%E7%82%96/</url>
      
        <content type="html"><![CDATA[<h3 id="js-观察者模式"><a href="#js-观察者模式" class="headerlink" title="js 观察者模式"></a>js 观察者模式</h3><p>Js 观察者模式也叫做发布订阅模式（Publish/Subscribe)</p><ul><li><p>分为3个部分 </p><ul><li>订阅 存储 对象的方法</li><li>发布 发布 对象的方法</li><li>退订 取消 对象的某一个方法</li></ul></li><li><p>利用原型的特性实现一个观察者模式，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.fns = [];</span><br><span class="line">&#125;</span><br><span class="line">Observer.prototype = &#123;</span><br><span class="line">    <span class="comment">//订阅</span></span><br><span class="line">    subscribe: <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fns.push(fn);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//退订</span></span><br><span class="line">    unsubscribe: <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fns = <span class="keyword">this</span>.fns.filter(</span><br><span class="line">                        <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span> (el !== fn) &#123;</span><br><span class="line">                                <span class="keyword">return</span> el;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//发布</span></span><br><span class="line">    update: <span class="function"><span class="keyword">function</span> (<span class="params">o, thisObj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> scope = thisObj || <span class="built_in">window</span>;</span><br><span class="line">        <span class="keyword">this</span>.fns.forEach(</span><br><span class="line">                        <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">                            el.call(scope, o);</span><br><span class="line">                        &#125;</span><br><span class="line">                    );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Observer;</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Robbin: '</span> + data + <span class="string">', 赶紧干活了！'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Randall: '</span> + data + <span class="string">', 找他加点工资去！'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">o.subscribe(f1);</span><br><span class="line">o.subscribe(f2);</span><br><span class="line"></span><br><span class="line">o.update(<span class="string">"Tom回来了！"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//退订f1</span></span><br><span class="line">o.unsubscribe(f1);</span><br><span class="line"><span class="comment">//再来验证</span></span><br><span class="line">o.update(<span class="string">"Tom回来了！"</span>);</span><br></pre></td></tr></table></figure></li><li><p>应用</p><ul><li>它定义了一种一对多的关系，当一个对象发生改变时，多个对该对象有依赖的其他对象也会跟着做出相应改变，这就非常适合用观察者模式来实现。使用观察者模式可以根据需要增加或删除对象，解决一对多对象间的耦合关系，使程序更易于扩展和维护。</li><li>观察者的使用场合就是：当一个对象的改变需要同时改变其它对象，并且它不知道具体有多少对象需要改变的时候，就应该考虑使用观察者模式。</li></ul></li><li><p>参考链接</p><ul><li><a href="https://www.cnblogs.com/TomXu/archive/2012/03/02/2355128.html" target="_blank" rel="noopener">深入理解JavaScript系列（32）：设计模式之观察者模式</a></li><li><a href="http://www.bkjia.com/Javascript/1074536.html" target="_blank" rel="noopener">Javascript设计模式理论与实战：观察者模式</a></li></ul></li></ul><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><ul><li><p>MVC </p><ul><li>包括3个部分<ul><li>M（model）保存数据</li><li>V    (view)  视图层</li><li>C （control)  控制逻辑</li></ul></li><li><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181015181703382.png" alt="image-20181015181703382"><ul><li>View 传送指令到 Controller</li><li>Controller 完成业务逻辑后，要求 Model 改变状态</li><li>Model 将新的数据发送到 View，用户得到反馈</li></ul></li></ul></li><li><p>MVVM （model view viewModel) </p><ul><li>包括3个部分<ul><li>model （数据 js对象）</li><li>viewModel (Dom listeners  Directive) </li><li>view (DOM)</li></ul></li></ul><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181015182226680.png" alt="image-20181015182226680"></p><p>它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然</p><p>其中VUE是MVVM </p></li><li><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener"> MVC，MVP 和 MVVM 的图示</a></li></ul></li></ul><h3 id="px-em-和-rem"><a href="#px-em-和-rem" class="headerlink" title="px em 和 rem"></a>px em 和 rem</h3><ul><li>任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。</li><li>em 相对于父元素</li><li>rem 相对于根元素</li></ul><h3 id="microtask-和macrotask-的区别"><a href="#microtask-和macrotask-的区别" class="headerlink" title="microtask 和macrotask 的区别"></a>microtask 和macrotask 的区别</h3><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181016115143213.png" alt="image-20181016115143213"></p><ul><li>Macrotask  包含生成dom对象、解析HTML、执行主线程js代码、更改当前URL还有其他的一些事件如页面加载、输入、网络事件和定时器事件。从浏览器的角度来看，macrotask代表一些离散的独立的工作。当执行完一个task后，浏览器可以继续其他的工作如页面重渲染和垃圾回收。</li><li>Microtasks则是完成一些更新应用程序状态的较小任务，如处理promise的回调和DOM的修改，这些任务在浏览器重渲染前执行。Microtask应该以异步的方式尽快执行，其开销比执行一个新的macrotask要小。Microtasks使得我们可以在UI重渲染之前执行某些任务，从而避免了不必要的UI渲染，这些渲染可能导致显示的应用程序状态不一致。</li><li>参考链接：<ul><li><a href="https://zhuanlan.zhihu.com/p/24460769" target="_blank" rel="noopener">HTML系列：macrotask和microtask</a></li></ul></li></ul><h3 id="Event-loop-和-js-的事件运行机制"><a href="#Event-loop-和-js-的事件运行机制" class="headerlink" title="Event loop 和 js 的事件运行机制"></a>Event loop 和 js 的事件运行机制</h3><ul><li>js 是单线程的语言，I/O 的操作会导致堵塞，所以有两个线程<ul><li>主线程 同步 </li><li>Event loop 线程 异步 点击事件，加载事件，定时器事件</li></ul></li><li>主线程 运行完毕后, 运行event loop中已经完成的事件</li><li>参考链接： <ul><li><a href="http://www.ruanyifeng.com/blog/2013/10/event_loop.html" target="_blank" rel="noopener">什么是 Event Loop？</a> </li><li><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">JavaScript 运行机制详解：再谈Event Loop</a></li></ul></li></ul><h3 id="Virtual-Dom"><a href="#Virtual-Dom" class="headerlink" title="Virtual Dom"></a>Virtual Dom</h3><ul><li><p>应用 React  and Vue</p></li><li><p>Html  -&gt; 通过jsx 编译 -&gt; VD -&gt; 生成DOM</p></li><li><p>Virtual Dome 是一个对象， 主要包括3个变量： tag ,props, children</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    tag: "div",</span><br><span class="line">    props: &#123;&#125;,</span><br><span class="line">    children: [</span><br><span class="line">        "Hello World", </span><br><span class="line">        &#123;</span><br><span class="line">            tag: "ul",</span><br><span class="line">            props: &#123;&#125;,</span><br><span class="line">            children: [&#123;</span><br><span class="line">                tag: "li",</span><br><span class="line">                props: &#123;</span><br><span class="line">                    id: 1,</span><br><span class="line">                    class: "li-1"</span><br><span class="line">                &#125;,</span><br><span class="line">                children: ["第", 1]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Diff 算法</p><ul><li><p>state变化，生成新的VD</p></li><li><p>比较VD与之前VD的异同</p></li><li><p>生成差异对象（<code>patch</code>）</p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*差异对象的结构*/</span> </span><br><span class="line">&#123;</span><br><span class="line">    type,</span><br><span class="line">    vdom,</span><br><span class="line">    props: [&#123;</span><br><span class="line">               type,</span><br><span class="line">               key,</span><br><span class="line">               value </span><br><span class="line">            &#125;]</span><br><span class="line">    children</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>遍历差异对象并更新dom</p></li></ul></li><li><p>参考链接</p><ul><li><a href="https://segmentfault.com/a/1190000016129036" target="_blank" rel="noopener">你不知道的Virtual DOM（一）：Virtual Dom介绍</a></li></ul></li></ul><h3 id="JQ-中的promise-实现-和-deferred-对象"><a href="#JQ-中的promise-实现-和-deferred-对象" class="headerlink" title="JQ 中的promise 实现 和 deferred 对象"></a>JQ 中的promise 实现 和 deferred 对象</h3><ul><li><p>deferred  （$.deferred）for 异步编程 </p></li><li><p>deferred 有三种状态： </p><ul><li>pending(待定)  方法:   .always </li><li>resolved(成功)  方法： .done    .always</li><li>rejected(失败)   方法： .failed  .always</li></ul></li><li><p>.always 是绑定的回调函数，无聊成功与否都会执行</p></li><li><p>deferred 还有个.then 的方法， 简化.done 和 .failed， 实现<strong>任务链条</strong>（chain tasks）。</p></li><li><p>promise </p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = deferred.promise();</span><br></pre></td></tr></table></figure></li><li><p><strong>deferred</strong>: <em>reject, resolve, done, fail, then, always</em>   内部使用</p></li><li><p><strong>promise</strong>: <em>done, fail, then, always</em>   外部使用</p></li></ul></li><li><p>参考链接：</p><ul><li><a href="https://www.cnblogs.com/AndyWithPassion/p/jquery_deferred_promise.html" target="_blank" rel="noopener">延期（deferred）的承诺（promise） — jq异步编程浅析</a></li></ul></li></ul><h3 id="浏览器请求处理流程"><a href="#浏览器请求处理流程" class="headerlink" title="浏览器请求处理流程"></a>浏览器请求处理流程</h3><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181029100046367.png" alt="image-20181029100046367"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>响应式</title>
      <link href="/2018/10/15/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
      <url>/2018/10/15/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h3 id="响应式网站概念"><a href="#响应式网站概念" class="headerlink" title="响应式网站概念"></a>响应式网站概念</h3><ul><li>Flexible grid layout 弹性网格布局</li><li>Flexible image 弹性图片</li><li>Media queries 媒体查询</li></ul><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><ul><li><p>CSS2 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel="stylesheet" type="text/css" href="site.css" media = "screen" /&gt;</span><br><span class="line">&lt;link rel="stylesheet" type="text/css" href="print.css" media = "print" /&gt;</span><br></pre></td></tr></table></figure></li><li><p>CSS3   </p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> all and (min-width: <span class="number">800px</span>) and (orientation: landscape)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*and or nor only 四种*/</span></span><br></pre></td></tr></table></figure><ul><li><p>viewport </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">width = device-width, </span></span></span><br><span class="line"><span class="tag"><span class="string">minimum-scale = 1.0,  //最小缩放比例</span></span></span><br><span class="line"><span class="tag"><span class="string">maximum-scale = 1.0,  //最大缩放比例</span></span></span><br><span class="line"><span class="tag"><span class="string">user-scalable = 'no'  //禁用了用户缩放</span></span></span><br><span class="line"><span class="tag"><span class="string">/&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span></span></span><br></pre></td></tr></table></figure></li><li><p>断点选择</p><p>  0-480 小屏幕</p><p>  481-800 中屏幕</p><p>  801-1400 大屏幕</p><p>  1400+ 巨屏幕</p></li><li><p>em 相对的长度单位</p><ul><li>em 相对的参照物为父元素的font-size</li><li>em 具有继承的特点</li><li>当没有font-size时，浏览器会有一个默认的em设置： 1em = 16px</li></ul></li><li><p>rem 的参照物为根元素html, 相对于参照物固定不变</p><ul><li>Font-size: 62.5%  1rem = 10px (10/16*100%)</li><li>Font-size: 100%   1rem = 16px</li></ul></li><li><p>清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一种*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"> <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line"> <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*第二种*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"> <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line"> <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line"> <span class="attribute">display</span>:block;</span><br><span class="line"> <span class="attribute">overflow</span>: hidden;</span><br><span class="line"> <span class="attribute">visibility</span>: hidden;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line"> <span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文字不换行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>媒体查询</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">50em</span>) &#123; </span><br><span class="line">  <span class="comment">/*1 rem = 16 px*/</span></span><br><span class="line">  <span class="selector-tag">header</span> <span class="selector-class">.top</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> @<span class="keyword">media</span> only screen and (min-width: <span class="number">30.0625em</span>) and (max-width: <span class="number">50em</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">media</span> only screen and (max-width: <span class="number">30em</span>) &#123;</span><br><span class="line">    <span class="selector-tag">header</span> <span class="selector-class">.top</span> <span class="selector-class">.tel</span>,</span><br><span class="line">      <span class="selector-tag">header</span> <span class="selector-class">.top</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span>,</span><br><span class="line">      <span class="selector-tag">header</span> <span class="selector-class">.top</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span><br><span class="line">          <span class="attribute">display</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>响应式图片</p><ul><li><p>图片的排版和布局</p></li><li><p>根据设备大小加载不同的图片</p></li><li><p>方式  </p><ul><li><p>js 或 服务端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeImageResponsive</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width= $(<span class="built_in">window</span>).width();</span><br><span class="line">    <span class="keyword">var</span> img = $(<span class="string">'.content img'</span>);</span><br><span class="line">    <span class="keyword">if</span>(width &lt;= <span class="number">480</span>)&#123;</span><br><span class="line">        img.attr(<span class="string">'src'</span>,<span class="string">'img/480.png'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(width &lt;= <span class="number">800</span>)&#123;</span><br><span class="line">        img.attr(<span class="string">'src'</span>,<span class="string">'img/800.png'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        img.attr(<span class="string">'src'</span>,<span class="string">'img/1600.png'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'resize load'</span>,makeImageResponsive);  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*或者将图片写入cookie 后台再调用*/</span></span><br></pre></td></tr></table></figure></li><li><p>srcset</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"image"</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">src</span>=<span class="string">"img/480.png"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">srcset</span>=<span class="string">"img/480.png 480w, img/800.png 800w, img/1600.png 1600w"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>srcset 配合sizes </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"image"</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">src</span> =<span class="string">"img/480.png"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">srcset</span> =<span class="string">"img/480.png 480w, img/800.png 800w, img/1600.png 1600w"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">sizes</span> = <span class="string">"100vw"</span> 或者</span></span><br><span class="line"><span class="tag">     <span class="attr">sizes</span>= <span class="string">"(min-width:800px) 800px, 100vw"</span> 或者</span></span><br><span class="line"><span class="tag">     <span class="attr">sizes</span>= <span class="string">"(min-width:800px) calc(100vw-30em), 100vw"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  //sizes = '100vw' vw: viewport width 100% 的视口宽度</span><br></pre></td></tr></table></figure></li><li><p>picture</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span>  <span class="attr">media</span>=<span class="string">"(max-width:36em)"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">srcset</span>=<span class="string">"img/simple-s.jpg 768w"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span>  <span class="attr">media</span>=<span class="string">"(orientation:landscape)"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">srcset</span>=<span class="string">"img/simple-s.jpg 768w"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span>  </span></span><br><span class="line"><span class="tag">             <span class="attr">srcset</span>=<span class="string">"img/simple.jpg 1800w"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"img/simple.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>svg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;test.svg&quot; alt=&quot;&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一次完整http 事务的过程</title>
      <link href="/2018/10/15/%E7%BD%91%E7%BB%9C/"/>
      <url>/2018/10/15/%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="一次完整的http事务过程"><a href="#一次完整的http事务过程" class="headerlink" title="一次完整的http事务过程"></a>一次完整的http事务过程</h3><ul><li><p>域名解析 </p></li><li><p>发起TCP的3次握手</p></li><li><p>建立TCP连接后发起http请求</p></li><li><p>服务器响应http请求，浏览器得到html代码</p></li><li><p>浏览器解析html代码，并请求html代码中的资源（如js、css、图片等）</p></li><li><p>浏览器对页面进行渲染呈现给用户</p><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181021104908400.png" alt="image-20181021104908400"></p></li></ul><p>  <img src="https://i.imgur.com/D0UlMtb.png" alt="渲染"></p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p> <a href="https://www.linux178.com/web/httprequest.html" target="_blank" rel="noopener">一次完整http 事务的过程</a></p><p> <a href="https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651553818&amp;idx=1&amp;sn=3ce840113d28ee2b2cafe4c7fc48ef91&amp;chksm=802557dbb752decd2118e3ad7a3ea803a0c41c6594f539fc54830dae9bbc2242b2fc03e7fb1c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">从输入URL到页面加载的过程？由一道题完善自己的前端知识体系！(非常详细！）</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端</title>
      <link href="/2018/10/12/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
      <url>/2018/10/12/%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="click-事件为什么-换成touch-事件"><a href="#click-事件为什么-换成touch-事件" class="headerlink" title="click 事件为什么 换成touch 事件"></a>click 事件为什么 换成touch 事件</h3><ul><li>用户碰触页面之后，需要等待一段时间来判断是不是双击（double tap）动作（双击会导致页面放大），而不是立即响应单击（click），等待的这段时间大约是300ms。</li></ul><h3 id="移动端，虚拟键盘会挡住input"><a href="#移动端，虚拟键盘会挡住input" class="headerlink" title="移动端，虚拟键盘会挡住input"></a>移动端，虚拟键盘会挡住input</h3><p>​    参考链接：<a href="https://www.zhihu.com/question/32746176" target="_blank" rel="noopener">https://www.zhihu.com/question/32746176</a></p><h3 id="实现点击图片放大再点击消失的功能"><a href="#实现点击图片放大再点击消失的功能" class="headerlink" title="实现点击图片放大再点击消失的功能"></a>实现点击图片放大再点击消失的功能</h3><p>​    参考链接：<a href="https://blog.csdn.net/xujiezi/article/details/40296619" target="_blank" rel="noopener">https://blog.csdn.net/xujiezi/article/details/40296619</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://www.ayqy.net/blog/%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E7%82%B9%E5%87%BB%E7%A9%BF%E9%80%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/#articleHeader3" target="_blank" rel="noopener">移动页面点击穿透问题解决方案</a></li><li><a href="http://www.cnblogs.com/zldream1106/p/3670988.html" target="_blank" rel="noopener">web移动前端的click点透问题</a></li><li><a href="https://github.com/abcrun/abcrun.github.com/issues/11" target="_blank" rel="noopener">移动端Web App开发遇到的问题总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>盒模型</title>
      <link href="/2018/10/12/%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
      <url>/2018/10/12/%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>标准模型 (默认)  <ul><li>设置的width即为内容宽度</li><li>相当于<code>box-sizing:  content-box</code></li></ul></li><li>IE 模型  <ul><li>设置的width为内容宽度+ padding + border </li><li>相当于<code>box-sizing: border-box</code></li></ul></li></ul><h3 id="BFC-Block-formatting-context"><a href="#BFC-Block-formatting-context" class="headerlink" title="BFC (Block formatting context)"></a>BFC (Block formatting context)</h3><ul><li>中文<code>块级格式化上下文</code></li><li><p>网页中存在的<code>box</code>种类</p><ul><li>block-level box:display 属性为 block, list-item, table 的元素，会生成 block-level box。并且参与 block fomatting context；</li><li>inline-level box:display 属性为 inline, inline-block, inline-table 的元素，会生成 inline-level box。并且参与 inline formatting context；</li><li>run-in box: css3 中(略)</li></ul></li><li><p><code>BFC1</code> 规则</p><ul><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算BFC的高度时，浮动元素也参与计算</li></ul></li><li><p>触发生成<code>BFC</code>的元素</p><ul><li><p>根元素</p></li><li><p>float属性不为none</p></li><li><p>position为absolute或fixed</p></li><li><p>display为inline-block, table-cell, table-caption, flex, inline-flex</p></li><li><p>overflow不为visible</p></li></ul></li><li><p>应用</p><ul><li><code>overflow: hidden</code> 实现两栏布局 </li><li>清除浮动</li><li>防止垂直margin 重叠</li></ul></li></ul><h3 id="js-如何设置获取盒模型对应的宽和高"><a href="#js-如何设置获取盒模型对应的宽和高" class="headerlink" title="js 如何设置获取盒模型对应的宽和高"></a>js 如何设置获取盒模型对应的宽和高</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dom.style.width/height</span><br><span class="line">dom.currentStyle.width/height</span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(dom).width/height</span><br><span class="line">dom.getBoundingClientRect().width/height   <span class="comment">//计算绝对位置 top left</span></span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html" target="_blank" rel="noopener">前端精选文摘：BFC 神奇背后的原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> BFC </tag>
            
            <tag> 盒模型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端工具</title>
      <link href="/2018/10/12/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/10/12/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<ul><li>编辑器插件<ul><li><a href="https://codemirror.net/doc/manual.html" target="_blank" rel="noopener">codemirror</a>  </li><li><a href="http://ueditor.baidu.com/website/" target="_blank" rel="noopener">百度umeditor</a></li></ul></li></ul><ul><li>生成 favicon.icon <a href="http://www.bitbug.net" target="_blank" rel="noopener">www.bitbug.net</a> </li><li>项目文档 Humans.txt <a href="http://humanstxt.org/" target="_blank" rel="noopener">http://humanstxt.org/</a></li><li>在线Markdown <a href="https://dillinger.io/" target="_blank" rel="noopener">https://dillinger.io/</a></li><li>检查浏览器的版本 <a href="https://browsehappy.com/" target="_blank" rel="noopener">https://browsehappy.com/</a></li><li>HTML5 outliner <a href="https://gsnedders.html5.org/outliner/" target="_blank" rel="noopener">https://gsnedders.html5.org/outliner/</a></li><li>自动增加前缀 <a href="https://autoprefixer.github.io/" target="_blank" rel="noopener">https://autoprefixer.github.io/</a></li><li>图片滚动组件  <a href="https://owlcarousel2.github.io/OwlCarousel2/" target="_blank" rel="noopener">https://owlcarousel2.github.io/OwlCarousel2/</a></li><li>Can i use <a href="https://caniuse.com/" target="_blank" rel="noopener">https://caniuse.com/</a></li><li>图片自适应 picturefill <a href="https://scottjehl.github.io/picturefill/" target="_blank" rel="noopener">https://scottjehl.github.io/picturefill/</a></li><li>图片压缩  <a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></li><li>浏览器同步测试工具  <a href="https://www.browsersync.io/" target="_blank" rel="noopener">https://www.browsersync.io/</a></li><li>查找icon 图标   <a href="https://www.iconfinder.com/" target="_blank" rel="noopener">https://www.iconfinder.com/</a></li><li>雅虎军规 <a href="https://www.tuicool.com/articles/J3uyaa" target="_blank" rel="noopener">https://www.tuicool.com/articles/J3uyaa</a></li><li>字体库 <a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">http://fontawesome.dashgame.com/</a></li><li>svg 改成icon <a href="https://icomoon.io/" target="_blank" rel="noopener">https://icomoon.io/</a></li><li>生成二维码，看手机端效果 <a href="https://cli.im/" target="_blank" rel="noopener">https://cli.im/</a></li><li>前端练习库 <ul><li><a href="http://www.freecodecamp.com/map" target="_blank" rel="noopener">FreeCodeCamp</a></li><li><a href="https://github.com/Rafase282/My-FreeCodeCamp-Code/wiki#welcome" target="_blank" rel="noopener">FreeCodeCamp 国外答案</a>  </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器兼容性</title>
      <link href="/2018/10/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
      <url>/2018/10/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>css hack  <a href="http://browserhacks.com/" target="_blank" rel="noopener">http://browserhacks.com/</a>  </li><li>html5shiv(支持新的标签)  <a href="https://github.com/aFarkas/html5shiv" target="_blank" rel="noopener">https://github.com/aFarkas/html5shiv</a></li><li>ie 支持媒体查询 <a href="https://github.com/scottjehl/Respond" target="_blank" rel="noopener">https://github.com/scottjehl/Respond</a></li><li>检测兼容性 防御性编程  <a href="https://modernizr.com/" target="_blank" rel="noopener">https://modernizr.com/</a></li></ul><h3 id="placeholder-属性"><a href="#placeholder-属性" class="headerlink" title="placeholder 属性"></a>placeholder 属性</h3><ul><li><code>placeholder</code> 属性在ie7 8 中不兼容，需要用<code>span</code>做浮层。 可参考 <a href="https://www.cnblogs.com/youngboy-front/p/7001655.html" target="_blank" rel="noopener">textarea的placeholder属性兼容ie8ie9</a></li></ul><h3 id="JS-判断IE的版本"><a href="#JS-判断IE的版本" class="headerlink" title="JS 判断IE的版本"></a>JS 判断IE的版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line"><span class="keyword">if</span>(ua.indexOf(<span class="string">"MSIE"</span>)&gt;<span class="number">0</span>)&#123;   </span><br><span class="line">    <span class="keyword">if</span>(ua.indexOf(<span class="string">"MSIE 6.0"</span>)&gt;<span class="number">0</span>)&#123;   </span><br><span class="line">        alert(<span class="string">"ie6"</span>);    </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">if</span>(ua.indexOf(<span class="string">"MSIE 7.0"</span>)&gt;<span class="number">0</span>)&#123;  </span><br><span class="line">        alert(<span class="string">"ie7"</span>);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">if</span>(ua.indexOf(<span class="string">"MSIE 8.0"</span>)&gt;<span class="number">0</span> || (ua.indexOf(<span class="string">"MSIE 9.0"</span>)&gt;<span class="number">0</span> &amp;&amp; !<span class="built_in">window</span>.innerWidth))&#123;</span><br><span class="line">        alert(<span class="string">"ie8"</span>);  </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">if</span>(ua.indexOf(<span class="string">"MSIE 9.0"</span>)&gt;<span class="number">0</span>)&#123;  </span><br><span class="line">        alert(<span class="string">"ie9"</span>);  </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IE7下绝地定位元素会被其他元素遮挡"><a href="#IE7下绝地定位元素会被其他元素遮挡" class="headerlink" title="IE7下绝地定位元素会被其他元素遮挡"></a>IE7下绝地定位元素会被其他元素遮挡</h3><ul><li><p>参考<a href="http://blog.sina.com.cn/s/blog_648b3bb101016l6n.html" target="_blank" rel="noopener">IE7 以下绝对定位被某元素遮挡</a>解决方式：</p></li><li><p>对遮挡元素中设置z-index:0;初始化掉。</p></li><li>在被遮挡的父元素中，也就是设置了相对定位的元素中设置z-index属性，最好比遮挡元素要大一些。</li></ul><h3 id="CSS-hack"><a href="#CSS-hack" class="headerlink" title="CSS hack"></a>CSS hack</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-tag">background</span>: <span class="selector-tag">red</span>;         <span class="comment">/*IE7*/</span></span><br><span class="line"><span class="selector-tag">margin-bottom</span><span class="selector-pseudo">:40px</span>;       <span class="comment">/*ff的属性*/</span>  </span><br><span class="line"><span class="selector-tag">margin-bottom</span><span class="selector-pseudo">:140px</span>\9;    <span class="comment">/* IE6/7/8的属性 */</span>  </span><br><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:red</span>\0;              <span class="comment">/* IE8支持 */</span>  </span><br><span class="line">*<span class="selector-tag">margin-bottom</span><span class="selector-pseudo">:450px</span>;     <span class="comment">/*IE6/7的属性*/</span>  +<span class="selector-tag">margin-bottom</span><span class="selector-pseudo">:450px</span>;  </span><br><span class="line">_<span class="selector-tag">color</span>:<span class="selector-id">#ff0000</span>;         <span class="comment">/* 只ie6支持 */</span> </span><br><span class="line"></span><br><span class="line"><span class="selector-id">#1</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span>; &#125; <span class="comment">/* FF环境 */</span></span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-id">#1</span> &#123; <span class="attribute">color</span>: <span class="number">#666</span>; &#125; <span class="comment">/*IE6环境 */</span></span><br><span class="line">+<span class="selector-tag">html</span> <span class="selector-id">#1</span> &#123; <span class="attribute">color</span>: <span class="number">#999</span>; &#125; <span class="comment">/*IE7环境 */</span></span><br></pre></td></tr></table></figure><h3 id="IE-下-textarea"><a href="#IE-下-textarea" class="headerlink" title="IE 下 textarea"></a>IE 下 <code>textarea</code></h3><p>IE 下 <code>textarea</code> 的滚动条消失添加 <code>overflow： auto;</code></p><p>###IE7下 <code>margin-top</code> 失效, 解决方案: </p><ul><li>用padding 代替 margin</li><li>在两个元素之间 用 占位符 <code>&lt;br/&gt;</code></li></ul><p>###参考链接</p><p><a href="http://www.cnblogs.com/suspiderweb/p/5277540.html" target="_blank" rel="noopener">主流浏览器css兼容问题的总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JsTips_03</title>
      <link href="/2018/10/12/jsTips_03/"/>
      <url>/2018/10/12/jsTips_03/</url>
      
        <content type="html"><![CDATA[<h3 id="js-和jquery-中获得data-属性的数据"><a href="#js-和jquery-中获得data-属性的数据" class="headerlink" title="js 和jquery 中获得data*属性的数据"></a>js 和jquery 中获得<code>data*</code>属性的数据</h3>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*js*/</span></span><br><span class="line"><span class="keyword">var</span> appId = div.dataset.appid;<span class="comment">//获取data-appid的值</span></span><br><span class="line"><span class="comment">/*jquery*/</span></span><br><span class="line"><span class="keyword">var</span> appid = $(<span class="string">"#myDiv"</span>).data(<span class="string">"appid"</span>); <span class="comment">//123</span></span><br></pre></td></tr></table></figure><ul><li>参考链接： <a href="https://segmentfault.com/a/1190000005770912" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005770912</a></li></ul><h3 id="显示keyCode"><a href="#显示keyCode" class="headerlink" title="显示keyCode"></a>显示keyCode</h3><p><img src="http://upload-images.jianshu.io/upload_images/8952934-345b06bd113dd2d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="阻止右键"><a href="#阻止右键" class="headerlink" title="阻止右键"></a>阻止右键</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.oncontextmenu  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取目标的当位置"><a href="#获取目标的当位置" class="headerlink" title="获取目标的当位置"></a><a href="http://shanmao.me/web/js/pagex-clientx-offsetx-layerx-de-qu-bie" target="_blank" rel="noopener">获取目标的当位置</a></h3><p>x:设置或者是得到鼠标相对于目标事件的父元素的外边界在x坐标上的位置。<br>clientX:相对于客户区域的x坐标位置，不包括滚动条，就是正文区域。<br>offsetx：设置或者是得到鼠标相对于目标事件的父元素的内边界在x坐标上的位置。<br>screenX:相对于用户屏幕<br>PageY=clientY+scrollTop-clientTop;(只讨论Y轴,X轴同理,下同)<br>页面上的位置=可视区域位置+页面滚动条切去高度-自身border高度,还是直接上图比较清楚<br>(<a href="http://blog.csdn.net/xuantian868/article/details/3116442" target="_blank" rel="noopener">http://blog.csdn.net/xuantian868/article/details/3116442</a>)</p><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a><a href="https://www.w3cplus.com/css/vertically-center-content-with-css" target="_blank" rel="noopener">水平垂直居中</a></h3><h3 id="jQuery中position-与offset-区别"><a href="#jQuery中position-与offset-区别" class="headerlink" title="jQuery中position()与offset()区别"></a><a href="http://www.cnblogs.com/tianguook/p/4079542.html" target="_blank" rel="noopener">jQuery中position()与offset()区别</a></h3><p>position()获取相对于它最近的具有相对位置(position:relative或position:absolute)的父级元素的距离，如果找不到这样的元素，则返回相对于浏览器的距离。<br>offset()始终返回相对于浏览器文档的距离，它会忽略外层元素。<br>下边看个简单的例子，这里外层的div元素(position:relative)仅一个：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id = <span class="string">"outer"</span> style=<span class="string">"width:200px;position:relative;left:100px;"</span>&gt;</span><br><span class="line">  &lt;div id=<span class="string">"inner"</span> style=<span class="string">"position:absolute;left:50px;top:60px;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/获取相对于最近的父级(position:relative或position:absolute)的位置</span></span><br><span class="line"><span class="regexp">var vposition = $("#inner").position();</span></span><br><span class="line"><span class="regexp">alert(vposition.left);/</span><span class="regexp">/输出：50</span></span><br><span class="line"><span class="regexp">alert(vposition.top);/</span><span class="regexp">/输出：60</span></span><br><span class="line"><span class="regexp">var voffset = $("#inner").offset();</span></span><br><span class="line"><span class="regexp">alert(voffset.left);/</span><span class="regexp">/输出：$("#outer").offset().left+50</span></span><br><span class="line"><span class="regexp">alert(voffset.top);/</span><span class="regexp">/输出：$("#outer").offset().top+60</span></span><br></pre></td></tr></table></figure><p>在不同浏览器中,offset()得到的相对于浏览器的位置不同，相信你看了上边相应的注释，已经掌握了position()同offset()方法的区别。</p><h3 id="Li-滚动"><a href="#Li-滚动" class="headerlink" title="Li 滚动"></a>Li 滚动</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"dpdataul"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhhaha1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhhah2a2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhhaha3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhhaha4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhhaha5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhhaha6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhhaha7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhhaha8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhhaha9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>hhhaha10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">'up'</span>&gt;</span>up<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">'down'</span>&gt;</span>down<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//css</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line">$(<span class="string">"#dpdataul"</span>).scrollTop(<span class="number">150</span>);</span><br><span class="line">$(<span class="string">"#up"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    $(<span class="string">"#up"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      binddpdatascroll(<span class="number">30</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"#down"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      binddpdatascroll(<span class="number">-30</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binddpdatascroll</span>(<span class="params">n</span>)</span>&#123; <span class="comment">//大盘滚动</span></span><br><span class="line">    <span class="keyword">var</span> dpdataul = $(<span class="string">"#dpdataul"</span>);</span><br><span class="line">    <span class="keyword">var</span> nowstop = dpdataul.scrollTop();</span><br><span class="line">    dpdataul.animate(&#123;</span><br><span class="line">      scrollTop:nowstop + n</span><br><span class="line">    &#125;, <span class="number">200</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">      nowstop2 = dpdataul.scrollTop();</span><br><span class="line">      <span class="keyword">if</span>( nowstop2 &lt;= <span class="number">0</span> )&#123;</span><br><span class="line">        dpdataul.scrollTop(<span class="number">150</span>);</span><br><span class="line">        nowstop = <span class="number">150</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>( nowstop2 &gt; <span class="number">240</span> )&#123;</span><br><span class="line">        dpdataul.scrollTop(<span class="number">120</span>);</span><br><span class="line">        nowstop = <span class="number">120</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; );</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a><a href="https://segmentfault.com/q/1010000000435922" target="_blank" rel="noopener">倒计时</a></h3><h3 id="js中设置元素class的三种方法小结"><a href="#js中设置元素class的三种方法小结" class="headerlink" title="js中设置元素class的三种方法小结"></a><a href="http://www.jb51.net/article/28118.htm" target="_blank" rel="noopener">js中设置元素class的三种方法小结</a></h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JsTips_04</title>
      <link href="/2018/10/12/jsTips_04/"/>
      <url>/2018/10/12/jsTips_04/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要使用-addEventListener"><a href="#为什么要使用-addEventListener" class="headerlink" title="为什么要使用 addEventListener?"></a>为什么要使用 addEventListener?</h3><p> addEventListener 是 W3C DOM 规范中提供的注册事件监听器的方法。它的优点包括：  </p><ul><li>它允许给一个事件注册多个 listener。当存在其他的库时，使用 DHTML 库或者 Mozilla extensions 不会出现问题。</li><li>它提供了一种更精细的手段控制 listener 的触发阶段,（即可以选择捕获或者冒泡）。</li><li>它对任何 DOM 元素都是有效的，而不仅仅只对 HTML 元素有效。</li></ul><h3 id="与"><a href="#与" class="headerlink" title="=== 与 =="></a><code>===</code> 与 <code>==</code></h3><p>一般情况下都是用’===’</p><p>jQuery 中有个情况用’==’，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;<span class="attr">a</span>:<span class="number">10</span>,<span class="attr">b</span>:<span class="number">20</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(obj.c == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'123);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//其中obj.c == null 相当于 obj.c === undefined || obj.c === null</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/z4JOisU.png" alt="`===` 和 `==`"> </p><p><img src="https://i.imgur.com/LAkOElS.png" alt=""> <img src="https://i.imgur.com/UZXi3Ym.png" alt=""></p><h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> b</span><br><span class="line">c.constructor</span><br><span class="line">d <span class="keyword">instanceof</span> <span class="string">"Number"</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/zhm7Hq3.png" alt="">  </p><p><img src="https://i.imgur.com/YJpd6TS.png" alt=""></p><p><img src="https://i.imgur.com/SzREjsE.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">'a'</span> =&gt; <span class="string">"string"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">'a) =&gt; [object String]</span></span><br><span class="line"><span class="string">constructor: </span></span><br><span class="line"><span class="string">function getConstructiorName(obj) &#123;</span></span><br><span class="line"><span class="string">return obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor.toString().match(/function\s*([^(]*)/)[1];</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">getConstructiorName([]) === "Array"; // true</span></span><br><span class="line"><span class="string">'</span><span class="literal">null</span><span class="string">' instanceof String =&gt; false</span></span><br></pre></td></tr></table></figure><h3 id="为什么动态加载图片取不到宽高"><a href="#为什么动态加载图片取不到宽高" class="headerlink" title="为什么动态加载图片取不到宽高"></a>为什么动态加载图片取不到宽高</h3><p> 参考链接：<a href="https://segmentfault.com/q/1010000004355214" target="_blank" rel="noopener">https://segmentfault.com/q/1010000004355214</a> </p><h3 id="jQuery-DOM节点的遍历"><a href="#jQuery-DOM节点的遍历" class="headerlink" title="jQuery DOM节点的遍历"></a>jQuery DOM节点的遍历</h3><p>参考链接：<a href="https://segmentfault.com/a/1190000010661082" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010661082</a></p><h3 id="对象转换成数组的方法"><a href="#对象转换成数组的方法" class="headerlink" title="对象转换成数组的方法"></a>对象转换成数组的方法</h3><ul><li><code>Array.from(obj)</code></li><li><code>[].slice.call(obj)</code></li></ul><h3 id="callee-和-caller-的作用"><a href="#callee-和-caller-的作用" class="headerlink" title="callee 和 caller 的作用"></a><code>callee</code> 和 <code>caller</code> 的作用</h3><p>  <img src="https://i.imgur.com/FD9OlaK.png" alt=""></p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>第一个选项是过期时间（expires），指定了 cookie 何时不会再被发送至服务器，随后浏览器将删除该 cookie。该选项的值是一个 Wdy, DD-Mon-YYYY HH:MM:SS GMT 日期格式的值，</p><p><img src="https://upload-images.jianshu.io/upload_images/8952934-a92b7da727c74209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>下一个选项是 domain，指定了 cookie 将要被发送至哪个或哪些域中。默认情况下，domain会被设置为创建该 cookie 的页面所在的域名，所以当给相同域名发送请求时该 cookie 会被发送至服务器。</p><p><img src="https://upload-images.jianshu.io/upload_images/8952934-38dfabd2719bc995.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/8952934-d6095a40a6c91957.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>###<code>childNodes</code> 与  <code>children</code>  </p><ul><li><code>childNodes</code>：它是标准属性，它返回指定元素的子元素集合，包括HTML节点，所有属性，文本节点。  </li><li><code>children</code>：非标准属性，它返回指定元素的子元素集合。<br>但它只返回HTML节点，甚至不返回文本节点，虽然不是标准的DOM属性，但它和innerHTML方法一样，得到了几乎所有浏览器的支持。</li></ul><p>###深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">initItemForUpdate: <span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = c || &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> p) &#123;</span><br><span class="line">        <span class="comment">// 属性i是否为p对象的自有属性</span></span><br><span class="line">        <span class="keyword">if</span> (p.hasOwnProperty(i)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> p[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">                c[i] = <span class="built_in">Array</span>.isArray(p[i]) ? [] : &#123;&#125;</span><br><span class="line">                deepCopy(p[i], c[i])</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 属性是基础类型时，直接拷贝</span></span><br><span class="line">                c[i] = p[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###图片轮播</p><p>web 端：   <a href="http://www.cnblogs.com/LIUYANZUO/p/5679753.html" target="_blank" rel="noopener">手把手原生js简单轮播图</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JsTips_05</title>
      <link href="/2018/10/12/jsTips_05/"/>
      <url>/2018/10/12/jsTips_05/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript-运行机制详解：再谈Event-Loop"><a href="#JavaScript-运行机制详解：再谈Event-Loop" class="headerlink" title="JavaScript 运行机制详解：再谈Event Loop"></a>JavaScript 运行机制详解：再谈Event Loop</h3><p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" title="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</a></p><h3 id="Js-小测试"><a href="#Js-小测试" class="headerlink" title="Js 小测试"></a>Js 小测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> returnedFunction = foo();</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">returnedFunction();  <span class="comment">//10</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params">funArg</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">20</span>;</span><br><span class="line">funArg();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">b(foo);  <span class="comment">//10</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;  <span class="comment">// 55555</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;  <span class="comment">// 每一秒 0 , 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;  <span class="comment">// 55555</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;(i),i*<span class="number">1000</span>)</span><br><span class="line">&#125;  <span class="comment">// 01234</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;  <span class="comment">// 5个undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="keyword">let</span> j = i;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(j)</span><br><span class="line">&#125;,j*<span class="number">1000</span>)</span><br><span class="line">&#125;  <span class="comment">// 0, 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;,i*<span class="number">1000</span>)</span><br><span class="line">&#125;  <span class="comment">// 0, 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure><h3 id="input-输入金额必须是数字"><a href="#input-输入金额必须是数字" class="headerlink" title="input 输入金额必须是数字"></a>input 输入金额必须是数字</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".other_num"</span>).keypress(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> keyCode;</span><br><span class="line">   <span class="built_in">window</span>.event ? keyCode = e.keyCode :keyCode = e.which;</span><br><span class="line">   <span class="keyword">var</span> keyStr = <span class="built_in">String</span>.fromCharCode(keyCode);</span><br><span class="line">   <span class="keyword">return</span> <span class="regexp">/\d/</span>.test(keyStr) || keyCode == <span class="number">8</span>; <span class="comment">//firefox 下需要考虑backspace删除键 keyCode = 8</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>参考链接： <a href="http://www.cnblogs.com/chenwenhao/p/7050019.html" title="http://www.cnblogs.com/chenwenhao/p/7050019.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenwenhao/p/7050019.html</a></p><h3 id="js-jquery-中-ul-li的运用"><a href="#js-jquery-中-ul-li的运用" class="headerlink" title="js jquery 中 ul li的运用"></a>js jquery 中 ul li的运用</h3><p><a href="http://www.cnblogs.com/weihengblogs/p/3961616.html" title="http://www.cnblogs.com/weihengblogs/p/3961616.html" target="_blank" rel="noopener">http://www.cnblogs.com/weihengblogs/p/3961616.html</a></p><p>###禁止在<code>&lt;input&gt;</code>中输入中文</p><p><a href="https://blog.csdn.net/u011199063/article/details/73775443" title="https://blog.csdn.net/u011199063/article/details/73775443" target="_blank" rel="noopener">https://blog.csdn.net/u011199063/article/details/73775443</a></p><p>###倒计时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">6</span>;  </span><br><span class="line"><span class="comment">//显示倒数秒数  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTime</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    t -= <span class="number">1</span>;  </span><br><span class="line">    $(<span class="string">"#leftTime"</span>).html(t+<span class="string">'秒'</span>);  </span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="built_in">window</span>.location.href=<span class="string">"http://guba.eastmoney.com/"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 每秒执行一次,showTime()  </span></span><br><span class="line">    setTimeout(showTime,<span class="number">1000</span>);  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">showTime();</span><br></pre></td></tr></table></figure><p>###更换一段文字中的表情文字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">showface</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> facearr = [<span class="string">"微笑"</span>,<span class="string">"大笑"</span>,<span class="string">"鼓掌"</span>,<span class="string">"不说了"</span>,<span class="string">"为什么"</span>,<span class="string">"哭"</span>,<span class="string">"不屑"</span>,<span class="string">"怒"</span>,<span class="string">"滴汗"</span>,<span class="string">"拜神"</span>,<span class="string">"胜利"</span>,<span class="string">"亏大了"</span>,<span class="string">"赚大了"</span>,<span class="string">"牛"</span>,<span class="string">"俏皮"</span>,<span class="string">"傲"</span>,<span class="string">"好困惑"</span>,<span class="string">"兴奋"</span>,<span class="string">"赞"</span>,<span class="string">"不赞"</span>,<span class="string">"摊手"</span>,<span class="string">"好逊"</span>,<span class="string">"失望"</span>,<span class="string">"加油"</span>,<span class="string">"困顿"</span>,<span class="string">"想一下"</span>,<span class="string">"围观"</span>,<span class="string">"献花"</span>,<span class="string">"大便"</span>,<span class="string">"爱心"</span>,<span class="string">"心碎"</span>,<span class="string">"毛估估"</span>,<span class="string">"成交"</span>,<span class="string">"财力"</span>,<span class="string">"护城河"</span>,<span class="string">"复盘"</span>,<span class="string">"买入"</span>,<span class="string">"卖出"</span>,<span class="string">"满仓"</span>,<span class="string">"空仓"</span>,<span class="string">"抄底"</span>,<span class="string">"看多"</span>,<span class="string">"看空"</span>,<span class="string">"加仓"</span>,<span class="string">"减仓"</span>];</span><br><span class="line">    <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\[.+?\\]'</span>, <span class="string">"ig"</span>);</span><br><span class="line">    html = html.replace(re, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; facearr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>( <span class="string">"["</span> + facearr[i] + <span class="string">"]"</span> == item )&#123;</span><br><span class="line">                <span class="keyword">if</span>( i &lt; <span class="number">9</span> )&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'&lt;img title="'</span> + facearr[i] + <span class="string">'" src="http://gbres.dfcfw.com/face/emot/emot0'</span> + (i + <span class="number">1</span>) + <span class="string">'.png" alt="'</span> + item + <span class="string">'"&gt;'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'&lt;img title="'</span> + facearr[i] + <span class="string">'" src="http://gbres.dfcfw.com/face/emot/emot'</span> + (i + <span class="number">1</span>) + <span class="string">'.png" alt="'</span> + item + <span class="string">'"&gt;'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###获取网页的meta 和 title</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置页面title</span></span><br><span class="line"><span class="keyword">var</span> titleSummary = text.TxtLeftta(content,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">var</span> title = rewardMoney? <span class="string">'(悬赏金额'</span>+rewardMoney+<span class="string">'元)'</span>+ titleSummary+ <span class="string">'_东方财富问答'</span>: titleSummary+ <span class="string">'_东方财富问答'</span>;</span><br><span class="line">$(<span class="built_in">document</span>).attr(<span class="string">'title'</span>,title);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置页面description</span></span><br><span class="line"><span class="comment">// var description = document.querySelector('meta[name="description"]');</span></span><br><span class="line"><span class="keyword">var</span> description = $(<span class="string">'meta[name="description"]'</span>);</span><br><span class="line">$(description).attr(<span class="string">'content'</span>,Question.Content)</span><br></pre></td></tr></table></figure><p>###js 去重</p><p>参考链接：<a href="https://github.com/mqyqingfeng/Blog/issues/27" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/27</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JsTips_02</title>
      <link href="/2018/10/12/jsTips_02/"/>
      <url>/2018/10/12/jsTips_02/</url>
      
        <content type="html"><![CDATA[<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>500 Internet server Error 网络服务器出错 服务器挂了<br>502 Bad gateway 防火墙问题<br>400(错误请求)服务器不理解请求的语法。<br>403 Forbidden 传入的参数有误<br>404 Not Found<br>301(永久移动)请求的网页已永久移动到新位置。服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置。<br>302(临时移动)服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来响应以后的请求。此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编制索引。<br>303(查看其他位置)请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。对于除 HEAD 之外的所有请求，服务器会自动转到其他位置<br>304(未修改)自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。<br>200 OK </p><h3 id="3次握手协议"><a href="#3次握手协议" class="headerlink" title="3次握手协议"></a>3次握手协议</h3><p>连接要3次 断开要4次  SYN 同步 ACK 确认<br><img src="http://upload-images.jianshu.io/upload_images/8952934-e02349426b310b96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="js-中的面向对象"><a href="#js-中的面向对象" class="headerlink" title="js 中的面向对象"></a>js 中的面向对象</h3><ul><li>封装 继承 多态（同一个动作的不同相应）</li><li>可以把那些不变的属性和方法，直接定义在prototype对象上。</li><li>参考链接<ul><li><a href="https://www.cnblogs.com/Leo_wl/p/5734794.html" target="_blank" rel="noopener">JS面向对象编程之：封装、继承、多态</a></li><li><a href="https://blog.csdn.net/jcx5083761/article/details/8606576" target="_blank" rel="noopener">js—真正了解面向对象</a></li></ul></li></ul><h3 id="json-对象和json-之间的转换"><a href="#json-对象和json-之间的转换" class="headerlink" title="json 对象和json 之间的转换"></a>json 对象和json 之间的转换</h3><p><code>json</code>(javascript object notation) 是一种轻量级的数据交换格式。它是基于js 的一个子集。数据格式简单，易于读写，占用带宽小，如:<code>{&quot;age&quot;:&quot;12&quot;,&quot;name&quot;:&quot;back&quot;}</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//json 字符串转为json对象：</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">'('</span>+ str +<span class="string">')'</span>);</span><br><span class="line"><span class="keyword">var</span> obj = str.parseJSON();</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON对象转换为JSON字符串</span></span><br><span class="line"><span class="keyword">var</span> last = obj.toJSONString();</span><br><span class="line"><span class="keyword">var</span> last = <span class="built_in">JSON</span>.stringify(obj);</span><br></pre></td></tr></table></figure><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ul><li><p>在末尾增加一个<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code></p></li><li><p>使用<code>:after</code>伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"."</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">visibility</span>:hidden</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>;&#125;</span><br><span class="line">.clearfix&#123;*display:inline-block&#125;</span><br><span class="line"><span class="selector-class">.clear</span>,<span class="selector-class">.cls</span>&#123;<span class="attribute">clear</span>:both&#125;</span><br></pre></td></tr></table></figure></li><li><p>参考链接：<a href="http://lightcss.com/all-about-clear-float/" target="_blank" rel="noopener">清理浮动的那些事儿——6种清理浮动的方法</a></p></li></ul><h3 id="call-apply-和-bind-的区别"><a href="#call-apply-和-bind-的区别" class="headerlink" title="call apply 和 bind 的区别"></a>call apply 和 bind 的区别</h3><ul><li><p>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；</p></li><li><p>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文；</p></li><li><p>apply 、 call 、bind 三者都可以利用后续参数传参；</p></li><li><p>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    x: <span class="number">81</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(foo.getX.bind(obj)());  <span class="comment">//81</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.getX.call(obj));    <span class="comment">//81</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.getX.apply(obj));   <span class="comment">//81</span></span><br></pre></td></tr></table></figure></li><li><p>参考链接：<a href="http://www.cnblogs.com/coco1s/p/4833199.html" target="_blank" rel="noopener">巧妙运用call apply 和bind</a></p></li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#note" target="_blank" rel="noopener">正则表达式</a></h3><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a><a href="http://caibaojian.com/javascript-stoppropagation-preventdefault.html" target="_blank" rel="noopener">事件冒泡</a></h3><p><img src="http://upload-images.jianshu.io/upload_images/8952934-7465e97753a5c69a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="ul-中要对每个li-进行处理"><a href="#ul-中要对每个li-进行处理" class="headerlink" title="ul 中要对每个li 进行处理"></a><a href="http://m.jb51.net/article/85734.htm" target="_blank" rel="noopener">ul 中要对每个li 进行处理</a></h3><p>jq 中要应用到 each 对每个进行处理<br>纯js中需要用到for循环<br>另外点击事件是可能造成事件冒泡的，在下一次的点击事件中，点击目标会成为全局</p><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timestamp * <span class="number">1000</span>);<span class="comment">//时间戳为10位需*1000，时间戳为13位的话不需乘1000</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JsTips_01</title>
      <link href="/2018/10/12/jsTips_01/"/>
      <url>/2018/10/12/jsTips_01/</url>
      
        <content type="html"><![CDATA[<h3 id="事件的捕获和冒泡"><a href="#事件的捕获和冒泡" class="headerlink" title="事件的捕获和冒泡"></a>事件的捕获和冒泡</h3><p>除了IE 之外先捕获 -&gt; 当前节点事件 -&gt; 后冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"parent"</span> onclick=<span class="string">"alert(99)"</span>&gt;测试不阻止事件冒泡</span><br><span class="line">&lt;button id=<span class="string">"child"</span> onclick=<span class="string">"alert(4)"</span>&gt;我是内部div&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"event bubble"</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"event catch"</span>);</span><br><span class="line">&#125;,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>点击parent ： event catch -&gt; 99 -&gt;event bubble</p><p>点击child:       event catch -&gt; 4 -&gt; 99 -&gt;event bubble</p><h3 id="动态加载图片取不到宽高"><a href="#动态加载图片取不到宽高" class="headerlink" title="动态加载图片取不到宽高"></a><a href="https://segmentfault.com/q/101000000435521" target="_blank" rel="noopener">动态加载图片取不到宽高</a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params">url, callback</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image(); <span class="comment">//创建一个Image对象，实现图片的预下载     </span></span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        img.onload =<span class="literal">null</span>;</span><br><span class="line">        callback(img);</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = url; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历子节点的方法"><a href="#遍历子节点的方法" class="headerlink" title="遍历子节点的方法"></a><a href="https://segmentfault.com/a/1190000010661082" target="_blank" rel="noopener">遍历子节点的方法</a></h3><h3 id="数组的处理方法是否改变原数组"><a href="#数组的处理方法是否改变原数组" class="headerlink" title="数组的处理方法是否改变原数组"></a>数组的处理方法是否改变原数组</h3><p>  slice concat join 不会改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">//原数组不会改变</span></span><br><span class="line">source.slice(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// 返回[2,3]</span></span><br><span class="line">source.concat([<span class="number">6</span>,<span class="number">7</span>]) <span class="comment">//返回[1,2,3,4,5,6,7]</span></span><br><span class="line">source.join(<span class="string">'-'</span>) <span class="comment">//返回 1-2-3-4-5</span></span><br><span class="line"><span class="comment">//原数组会变</span></span><br><span class="line">source.splice(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">//返回 [2,3,4]</span></span><br><span class="line">source.pop();</span><br><span class="line">source.push();</span><br><span class="line">source;shift();</span><br><span class="line">source.unshift();</span><br><span class="line">source.reverse();</span><br></pre></td></tr></table></figure></p><h3 id="h5-选中元素"><a href="#h5-选中元素" class="headerlink" title="h5 选中元素"></a>h5 选中元素</h3><ul><li>querySelector（获得第一个满足条件的元素)  </li><li>querySelectorAll ( 这个出来的是一个数组）</li></ul><h3 id="原生的li-点击事件"><a href="#原生的li-点击事件" class="headerlink" title="原生的li 点击事件"></a>原生的li 点击事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; reloadDiv.length ;i++)&#123;</span><br><span class="line">    index = i;</span><br><span class="line">    reloadDiv[index].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        _this.loadimg();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URL-地址-参数获取介绍："><a href="#URL-地址-参数获取介绍：" class="headerlink" title="URL 地址 参数获取介绍："></a>URL 地址 参数获取介绍：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = http:<span class="comment">//www.jianshu.com/writer#/notebooks/18682777/notes/20130528/preview</span></span><br><span class="line"><span class="comment">//设置或获取对象指定的文件名或路径。</span></span><br><span class="line">alert(<span class="built_in">window</span>.location.pathname);<span class="comment">// "/writer" </span></span><br><span class="line"><span class="comment">//设置或获取整个 URL 为字符串。</span></span><br><span class="line">alert(<span class="built_in">window</span>.location.href);<span class="comment">// "http://www.jianshu.com/writer#/notebooks/18682777/notes/20130528/preview"</span></span><br><span class="line"><span class="comment">//设置或获取与 URL 关联的端口号码。</span></span><br><span class="line">alert(<span class="built_in">window</span>.location.port);<span class="comment">//"" </span></span><br><span class="line"><span class="comment">//设置或获取 URL 的协议部分。</span></span><br><span class="line">alert(<span class="built_in">window</span>.location.protocol);<span class="comment">//"http:" </span></span><br><span class="line"><span class="comment">//设置或获取 href 属性中在井号“#”后面的分段。</span></span><br><span class="line">alert(<span class="built_in">window</span>.location.hash);<span class="comment">//"#/notebooks/18682777/notes/20130528/preview" </span></span><br><span class="line"><span class="comment">//设置或获取 location 或 URL 的 hostname 和 port 号码。</span></span><br><span class="line">alert(<span class="built_in">window</span>.location.host);<span class="comment">//"www.jianshu.com" </span></span><br><span class="line"><span class="comment">//设置或获取 href 属性中跟在问号后面的部分。</span></span><br><span class="line">alert(<span class="built_in">window</span>.location.search);<span class="comment">//""</span></span><br></pre></td></tr></table></figure><h3 id="jquery-on-和-off-事件"><a href="#jquery-on-和-off-事件" class="headerlink" title="jquery on 和 off 事件"></a><a href="http://www.jb51.net/article/95723.htm" target="_blank" rel="noopener">jquery on 和 off 事件</a></h3><p>一个Button 键可能会被调用很多次，可以off 取消之前的click 事件</p><h3 id="详解clientHeight、offsetHeight、scrollHeight"><a href="#详解clientHeight、offsetHeight、scrollHeight" class="headerlink" title="详解clientHeight、offsetHeight、scrollHeight"></a><a href="http://blog.csdn.net/woxueliuyun/article/details/8638427" target="_blank" rel="noopener">详解clientHeight、offsetHeight、scrollHeight</a></h3><p>clientHeight: 内容可视区域的高度<br>offsetHeight: IE、Opera 认为 offsetHeight = clientHeight + 滚动条 + 边框。<br>NS、FF 认为 offsetHeight 是网页内容实际高度，可以小于 clientHeight。<br>scrollHeight: IE、Opera 认为 scrollHeight 是网页内容实际高度，可以小于 clientHeight。<br>NS、FF 认为 scrollHeight 是网页内容高度，不过最小值是 clientHeight<br><figure class="highlight plain"><figcaption><span>元素</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offsetHeight = padding + border + height；</span><br><span class="line">clientHeight = padding + height -水平滚动条的高度；</span><br><span class="line">scrollHeight &gt;= clientHeight；</span><br><span class="line">offsetLeft = 元素border左上角到画布原点的距离 或 到offsetParent的border box顶部的距离。</span><br></pre></td></tr></table></figure></p><h3 id="ES6-的相关知识"><a href="#ES6-的相关知识" class="headerlink" title="ES6 的相关知识"></a><a href="https://75team.com/post/5-javascript-%E2%80%9Cbad%E2%80%9D-parts-that-are-fixed-in-es6.html" target="_blank" rel="noopener">ES6 的相关知识</a></h3><blockquote><p><strong>增加的新功能：</strong><br>箭头操作符 () =&gt; {}<br>类的支持 class<br>增强的对象字面量<br>可以在对象字面量里面定义原型<br>定义方法可以不用function关键字<br>直接调用父类方法<br>字符串模板 :<code>${}</code><br>解构<br>let const </p></blockquote><h3 id="上传资源的方法-post-put-patch"><a href="#上传资源的方法-post-put-patch" class="headerlink" title="上传资源的方法 post put patch"></a>上传资源的方法 post put patch</h3><blockquote><p>POST方法用来创建一个子资源，如 /api/users，会在users下面创建一个user，如users/1<br>POST方法不是幂等的，多次执行，将导致多条相同的用户被创建（users/1，users/2 …而这些用户除了自增长id外有着相同的数据，除非你的系统实现了额外的数据唯一性检查）<br>PUT方法用来创建一个URI已知的资源，或对已知资源进行完全替换，比如users/1，<br>PUT方法一般会用来更新一个已知资源，除非在创建前，你完全知道自己要创建的对象的URI。<br>PATCH方法是新引入的，是对PUT方法的补充，用来对已知资源进行局部更新<br>get 和 post比较常见  GET请求将提交的数据放置在HTTP请求协议头中<br>POST提交的数据则放在实体数据中<br>简单来说：<br>get -&gt; list<br>post -&gt; create<br>patch -&gt; update<br><img src="https://i.imgur.com/jyxfCKq.png" alt="getPost"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery 源码分析</title>
      <link href="/2018/10/12/jquery_03/"/>
      <url>/2018/10/12/jquery_03/</url>
      
        <content type="html"><![CDATA[<h2 id="The-Write-Less-Do-More"><a href="#The-Write-Less-Do-More" class="headerlink" title="The Write Less, Do More"></a>The Write Less, Do More</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><ul><li>jQuery 2.1.1 源码结构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line">    factory(global);</span><br><span class="line">&#125;(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">window, noGlobal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context );</span><br><span class="line">&#125;;</span><br><span class="line">jQuery.fn = jQuery.prototype = &#123;&#125;;</span><br><span class="line"><span class="comment">// 核心方法</span></span><br><span class="line"><span class="comment">// 回调系统</span></span><br><span class="line"><span class="comment">// 异步队列</span></span><br><span class="line"><span class="comment">// 数据缓存</span></span><br><span class="line"><span class="comment">// 队列操作</span></span><br><span class="line"><span class="comment">// 选择器引</span></span><br><span class="line"><span class="comment">// 属性操作</span></span><br><span class="line"><span class="comment">// 节点遍历</span></span><br><span class="line"><span class="comment">// 文档处理</span></span><br><span class="line"><span class="comment">// 样式操作</span></span><br><span class="line"><span class="comment">// 属性操作</span></span><br><span class="line"><span class="comment">// 事件体系</span></span><br><span class="line"><span class="comment">// AJAX交互</span></span><br><span class="line"><span class="comment">// 动画引擎</span></span><br><span class="line"><span class="keyword">return</span> jQuery;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><ul><li>jq的模块依赖网</li></ul><p><img src="https://i.imgur.com/sjgZyQ5.png" alt=""></p><h3 id="立即调用表达式"><a href="#立即调用表达式" class="headerlink" title="立即调用表达式"></a>立即调用表达式</h3><p>任何库与框架设计的第一个要点就是解决命名空间与变量污染的问题。jQuery就是利用了JavaScript函数作用域的特性，采用立即调用表达式包裹了自身的方法来解决这个问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法1 </span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, factory</span>) </span>&#123;</span><br><span class="line">    factory(<span class="built_in">window</span>)</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//jQuery的调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line"><span class="keyword">var</span> factory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jQuery = factory();</span><br><span class="line"><span class="comment">//写法3</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><p>全局变量是魔鬼, 匿名函数可以有效的保证在页面上写入JavaScript，而不会造成全局变量的污染，通过小括号，让其加载的时候立即初始化，这样就形成了一个单例模式的效果从而只会执行一次。</p><h3 id="jq的类数据对象结构"><a href="#jq的类数据对象结构" class="headerlink" title="jq的类数据对象结构"></a>jq的类数据对象结构</h3><p>通过对象键值对的关系保存着属性，原型保存着方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//强制为对象</span></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> aQuery)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> aQuery(selector);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="regexp">/[^#].*/</span>.exec(selector)[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">    <span class="keyword">this</span>.context = <span class="built_in">document</span>;</span><br><span class="line">    <span class="keyword">this</span>.selector = selector;</span><br><span class="line">    <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[num];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="jQuery中ready与load事件"><a href="#jQuery中ready与load事件" class="headerlink" title="jQuery中ready与load事件"></a>jQuery中ready与load事件</h3><p>jQuery有3种针对文档加载的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//document ready 简写</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="built_in">document</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>ready先执行，load后执行。</code></p><p>DOM文档加载的步骤：<br>要想理解为什么ready先执行，load后执行就要先了解下DOM文档加载的步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1) 解析HTML结构。</span><br><span class="line">(2) 加载外部脚本和样式表文件。</span><br><span class="line">(3) 解析并执行脚本代码。</span><br><span class="line">(4) 构造HTML DOM模型。//ready</span><br><span class="line">(5) 加载图片等外部文件。</span><br><span class="line">(6) 页面加载完毕。//load</span><br></pre></td></tr></table></figure></p><h3 id="jq多库共存处理（无冲突处理）"><a href="#jq多库共存处理（无冲突处理）" class="headerlink" title="jq多库共存处理（无冲突处理）"></a>jq多库共存处理（无冲突处理）</h3><p><code>noConflict</code> 函数</p><h3 id="init-构造图"><a href="#init-构造图" class="headerlink" title="init 构造图"></a>init 构造图</h3><p><img src="https://i.imgur.com/Bjjiqp8.png" alt=""><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ajQuery.fn = ajQuery.prototype = &#123;</span><br><span class="line">    name: <span class="string">'aaron'</span>,</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.selector = selector;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">constructor</span>: ajQuery</span><br><span class="line">&#125;</span><br><span class="line">ajQuery.fn.init.prototype = ajQuery.fn</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS 和 Jquery 中的高和宽</title>
      <link href="/2018/10/12/jquery_02/"/>
      <url>/2018/10/12/jquery_02/</url>
      
        <content type="html"><![CDATA[<h3 id="window-和-document-的区别"><a href="#window-和-document-的区别" class="headerlink" title="window 和 document 的区别"></a>window 和 document 的区别</h3><ul><li>window 对象表示浏览器打开的窗口</li><li><p>window 对象可以省略</p></li><li><p>document 对象是 window 对象的一部分</p></li><li>浏览器的HTML 文档成为 document 对象</li></ul><h3 id="window-location-和-document-loaction-的区别"><a href="#window-location-和-document-loaction-的区别" class="headerlink" title="window.location 和 document.loaction 的区别"></a>window.location 和 document.loaction 的区别</h3><ul><li>都是引用的Location 对象 表示该窗口中当前显示文档的URL</li><li>window.location === document.location</li></ul><h3 id="window-innerHeight-与-window。outerHeight"><a href="#window-innerHeight-与-window。outerHeight" class="headerlink" title="window.innerHeight 与 window。outerHeight"></a>window.innerHeight 与 window。outerHeight</h3><p><img src="https://i.imgur.com/rQ7oFRy.png" alt=""></p><h3 id="window-screen-包含有关用户屏幕的信息"><a href="#window-screen-包含有关用户屏幕的信息" class="headerlink" title="window.screen 包含有关用户屏幕的信息"></a>window.screen 包含有关用户屏幕的信息</h3><p>screen.height 和 screen.availHeight<br>screenTop screenLeft screen.width screen.availWidth </p><p><img src="https://i.imgur.com/1vBvhjy.png" alt=""><br><img src="https://i.imgur.com/DesM5SG.png" alt=""></p><h3 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h3><ul><li>window<br>innerHeight IE9 以上<br><img src="https://i.imgur.com/xwQea1b.png" alt=""><br>针对不同浏览器可视区域的宽高<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var w= docuemnt.documentElement.clientWidth || document.body.clientWidth;</span><br><span class="line">var h= docuemnt.documentElement.clientHeight || document.body.clientHeight;</span><br></pre></td></tr></table></figure></li></ul><h3 id="document"><a href="#document" class="headerlink" title="document"></a>document</h3><ul><li>与client 相关的宽高<br>clientWidth 和 clientHeight  <ul><li>可视部分的宽高！</li><li>padding+ content<br><img src="https://i.imgur.com/qhnrbXr.png" alt=""><br><img src="https://i.imgur.com/xP7C9eo.png" alt=""><br><img src="https://i.imgur.com/azyhzpl.png" alt=""></li></ul></li></ul><p>clientLeft 和 clientTop</p><ul><li>返回元素周围边框的厚度， 如果不指定一个边框或者不定位该元素，则值为0 </li><li><p>读取元素的border的宽度和高度<br>clienTop = border-top 的border-width<br>clienLeft = border-left 的border-width</p></li><li><p>与offset 相关的宽高<br>offsetWidth 与 offsetHeight</p></li><li>指元素的border + padding + content 的宽度和高度</li><li><p>该属性和期内部的内容是否超出元素大小无关，只与本来设定的border 以及width和height有关<br><img src="https://i.imgur.com/5RAaYXc.png" alt=""></p></li><li><p>offsetLeft 和 offsetTop<br><img src="https://i.imgur.com/2YzpoRD.png" alt=""><br><img src="https://i.imgur.com/PewEehF.png" alt=""><br><img src="https://i.imgur.com/2inBGun.png" alt=""></p></li><li><p>与scroll 先关<br><img src="https://i.imgur.com/OME9t93.png" alt=""><br><img src="https://i.imgur.com/wWLBCP7.png" alt=""><br><img src="https://i.imgur.com/tkEym5b.png" alt=""></p></li></ul><h3 id="documentElement-和-body-的关系"><a href="#documentElement-和-body-的关系" class="headerlink" title="documentElement 和 body 的关系"></a>documentElement 和 body 的关系</h3><p><img src="https://i.imgur.com/4ILLeKO.png" alt=""></p><h3 id="event-的五个坐标"><a href="#event-的五个坐标" class="headerlink" title="event 的五个坐标"></a><code>event</code> 的五个坐标</h3><p> <img src="https://i.imgur.com/dnT8f2P.png" alt=""></p><h3 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect()"></a><code>getBoundingClientRect()</code></h3><p><img src="https://i.imgur.com/Z6cW3ae.png" alt=""></p><h3 id="滚动到底部和顶部"><a href="#滚动到底部和顶部" class="headerlink" title="滚动到底部和顶部"></a>滚动到底部和顶部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  function scrollBottomOrTop()&#123;</span><br><span class="line">   var clients = window.innerHeight || document.documentElement.clientHeiht || document.body.clientWidth;</span><br><span class="line">   var scrollTop = document.body.scrollTop;</span><br><span class="line">   var wholeHeight = document.body.scrollHeight;</span><br><span class="line">   if(clients + scrollTop &gt;= wholeHeight)&#123;</span><br><span class="line">       alert(&apos;我已经滚动到底部了&apos;)</span><br><span class="line">   &#125;else if(scrollTop == 0 )&#123;</span><br><span class="line">       alert(&quot;我已经滚动到顶部了&quot;)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> window.onscroll = scrollBottomOrTop;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  var divscroll = document.getElementById(&apos;testDiv&apos;);</span><br><span class="line">  function scrollBottomOrTop()&#123;</span><br><span class="line">    var scrollTop = divscroll.scrollTop;</span><br><span class="line">    var wholeHeight = divscroll.scrollHeight;</span><br><span class="line">    var divHeight = divscroll.clientHeight;</span><br><span class="line">    if(divHeight + scrollTop &gt;= wholeHeight)&#123;</span><br><span class="line">        alert(&apos;我已经滚动到底部了&apos;)</span><br><span class="line">    &#125;else if(scrollTop == 0 )&#123;</span><br><span class="line">        alert(&quot;我已经滚动到顶部了&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  divscroll.onscoll = scrollBottomOrTop</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="计算滚动轴的宽度"><a href="#计算滚动轴的宽度" class="headerlink" title="计算滚动轴的宽度"></a>计算滚动轴的宽度</h3><p>document.offsetWidth - document.clientWidth</p><h3 id="jq部分的宽高"><a href="#jq部分的宽高" class="headerlink" title="jq部分的宽高"></a>jq部分的宽高</h3><p><img src="https://i.imgur.com/K4uPDOD.png" alt=""><br><img src="https://i.imgur.com/gLhvcJk.png" alt=""><br><img src="https://i.imgur.com/9X9kLoa.png" alt=""><br><img src="https://i.imgur.com/YeVTa3S.png" alt=""><br><img src="https://i.imgur.com/6nqYQwB.png" alt=""><br><img src="https://i.imgur.com/7kiJsc5.png" alt=""><br><img src="https://i.imgur.com/87GZ2qN.png" alt=""><br><img src="https://i.imgur.com/hC9aUYs.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(windwo).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">    <span class="keyword">var</span> ks_arae = $(<span class="built_in">window</span>).height();</span><br><span class="line">    <span class="keyword">var</span> wholeHeight = $(<span class="built_in">document</span>).height();</span><br><span class="line">    <span class="keyword">if</span>(ks_arae + scrollTop &gt;= wholeHeight)&#123;</span><br><span class="line">        alert(<span class="string">'滚动到底部啦'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(scrollTop == <span class="number">0</span>)&#123;</span><br><span class="line">        alert(<span class="string">"滚动到顶部啦"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>百度前端学院2016练习</title>
      <link href="/2018/10/12/ife/"/>
      <url>/2018/10/12/ife/</url>
      
        <content type="html"><![CDATA[<h3 id="练习链接"><a href="#练习链接" class="headerlink" title="练习链接"></a>练习链接</h3><p><a href="http://ife.baidu.com/2016/task/all?qq-pf-to=pcqq.group" title=" http://ife.baidu.com/2016/task/all?qq-pf-to=pcqq.group" target="_blank" rel="noopener"> http://ife.baidu.com/2016/task/all?qq-pf-to=pcqq.group</a></p><h3 id="Box-shadow"><a href="#Box-shadow" class="headerlink" title="Box-shadow"></a>Box-shadow</h3><p><code>box-shadow: h-shadow v-shadow blur spread color inset;</code></p><h3 id="空格-amp-nbsp"><a href="#空格-amp-nbsp" class="headerlink" title="空格 &amp;nbsp;"></a>空格 <code>&amp;nbsp;</code></h3><h3 id="通用样式-normalize-css"><a href="#通用样式-normalize-css" class="headerlink" title="通用样式 normalize.css"></a>通用样式 <code>normalize.css</code></h3><ul><li>link： <a href="https://necolas.github.io/normalize.css/8.0.0/normalize.css" target="_blank" rel="noopener">https://necolas.github.io/normalize.css/8.0.0/normalize.css</a>    </li><li><code>cnpm install normalize.css</code></li></ul><h3 id="Table-边框"><a href="#Table-边框" class="headerlink" title="Table 边框"></a>Table 边框</h3><p><code>border-collapse</code> 属性设置是否将表格边框折叠为单一边框：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    table</span></span><br><span class="line"><span class="undefined">    &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-collapse</span><span class="selector-pseudo">:collapse</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    table,th, td</span></span><br><span class="line"><span class="undefined">    &#123;</span></span><br><span class="line"><span class="undefined">        border: 1px solid black;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Month<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Savings<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Sum<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$180<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>January<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>February<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$80<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="css-选择器-first-child"><a href="#css-选择器-first-child" class="headerlink" title="css 选择器 first-child"></a>css 选择器 <code>first-child</code></h3><h3 id="Input-radio-样式设置"><a href="#Input-radio-样式设置" class="headerlink" title="Input radio 样式设置"></a>Input radio 样式设置</h3><ul><li>用图片样式进行覆盖 可以设置透明度  </li><li>css设置样式</li><li><p>参考连接   </p><ul><li><p><a href="https://www.cnblogs.com/sakura-panda/p/7065449.html" target="_blank" rel="noopener">纯CSS3美化单选按钮radio</a></p></li><li><p><a href="https://codepen.io/AngelaVelasquez/pen/Eypnq" target="_blank" rel="noopener">codepen</a></p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">for</span>=<span class="string">"male"</span> <span class="attr">class</span>=<span class="string">"radioBtn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"f-option"</span> <span class="attr">name</span>=<span class="string">"male"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"f-option"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"check"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">for</span>=<span class="string">"female"</span> <span class="attr">class</span>=<span class="string">"radioBtn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"f-option"</span> <span class="attr">name</span>=<span class="string">"female"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"f-option"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"check"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.radioBtn</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#AAAAAA</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.radioBtn</span> <span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.radioBtn</span> <span class="selector-tag">label</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.35em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span> <span class="number">25px</span> <span class="number">25px</span> <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">9</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: all <span class="number">0.25s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.radioBtn</span> <span class="selector-pseudo">:hover</span> <span class="selector-tag">label</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.radioBtn</span> <span class="selector-class">.check</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#AAAAAA</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line"><span class="attribute">transition</span>: border .<span class="number">25s</span> linear;</span><br><span class="line"><span class="attribute">-webkit-transition</span>: border .<span class="number">25s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.radioBtn</span> <span class="selector-pseudo">:hover</span> <span class="selector-class">.check</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#FFFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.radioBtn</span> <span class="selector-class">.check</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">transition</span>: background <span class="number">0.25s</span> linear;</span><br><span class="line"><span class="attribute">-webkit-transition</span>: background <span class="number">0.25s</span> linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.check</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#0DFF92</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.check</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#0DFF92</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=radio]</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">label</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0DFF92</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三栏式布局"><a href="#三栏式布局" class="headerlink" title="三栏式布局"></a>三栏式布局</h3><p>左边：float:left;<br>右边：float:right;<br>中间：用margin 控制距离；<br>父选择器：清除浮动</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clear</span>,<span class="selector-class">.cls</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="页面水平-垂直-居中"><a href="#页面水平-垂直-居中" class="headerlink" title="页面水平 垂直 居中"></a>页面水平 垂直 居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*方法一：知道高度和宽度*/</span></span><br><span class="line"><span class="selector-class">.sub</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方法二： 不知道高度和宽度*/</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cssTips</title>
      <link href="/2018/10/12/cssTips/"/>
      <url>/2018/10/12/cssTips/</url>
      
        <content type="html"><![CDATA[<h3 id="三角形实现"><a href="#三角形实现" class="headerlink" title="三角形实现"></a>三角形实现</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="test"&gt;&lt;/div&gt; </span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -.<span class="number">43em</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">4em</span>;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">border</span>: inherit;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参考链接 <ul><li><a href="http://simaq.github.io/css/2014/03/30/implementation-of-arrows-with-css/" target="_blank" rel="noopener">使用CSS绘制箭头</a>  </li><li><a href="http://www.cnblogs.com/undefined000/archive/2012/09/24/2700426.html" target="_blank" rel="noopener">div+css实现带三角箭头提示框</a></li></ul></li></ul><h3 id="图片裁剪：-clip-rect-0-0-0-0"><a href="#图片裁剪：-clip-rect-0-0-0-0" class="headerlink" title="图片裁剪：  clip: rect(0, 0, 0, 0);"></a>图片裁剪：  <code>clip: rect(0, 0, 0, 0);</code></h3><h3 id="CSS-supports"><a href="#CSS-supports" class="headerlink" title="CSS @supports"></a><a href="http://www.webhek.com/post/css-supports.html" target="_blank" rel="noopener">CSS @supports</a></h3><pre><code>火狐浏览器 谷歌浏览器 Opera浏览器最近刚刚添加了一项新的功能——在CSS里支持`@supports`标记、在JavaScript里支持`CSS.supports`函数，用来检测浏览器是否支持某个期望的样式功能。</code></pre><h3 id="em-px-gt-1em-16px"><a href="#em-px-gt-1em-16px" class="headerlink" title="em px  =&gt; 1em = 16px"></a>em px  =&gt; 1em = 16px</h3><h3 id="mark-标签-突出显示某个部分"><a href="#mark-标签-突出显示某个部分" class="headerlink" title="mark 标签 突出显示某个部分"></a><code>mark</code> 标签 突出显示某个部分</h3><h3 id="display-属性"><a href="#display-属性" class="headerlink" title="display 属性"></a><code>display</code> 属性</h3><p><img src="http://upload-images.jianshu.io/upload_images/8952934-2c69e5fe0b3f42a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="oo-css的作用和注意事项"><a href="#oo-css的作用和注意事项" class="headerlink" title="oo css的作用和注意事项"></a>oo css的作用和注意事项</h3><p><img src="https://i.imgur.com/GkpMsHp.png" alt=""></p><h3 id="文字过多，显示-的效果"><a href="#文字过多，显示-的效果" class="headerlink" title="文字过多，显示...的效果"></a>文字过多，显示<code>...</code>的效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line">max-width:70%; //可省或者固定宽度 width: 60px;</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其中textarea元素的高度为80px，而它的父元素div高度为84px，为什么会多出4px呢？"><a href="#其中textarea元素的高度为80px，而它的父元素div高度为84px，为什么会多出4px呢？" class="headerlink" title="其中textarea元素的高度为80px，而它的父元素div高度为84px，为什么会多出4px呢？"></a>其中textarea元素的高度为80px，而它的父元素div高度为84px，为什么会多出4px呢？</h3><p>设textarea为 display: block;</p><h3 id="loading-动画效果"><a href="#loading-动画效果" class="headerlink" title="loading 动画效果"></a>loading 动画效果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading ball-pulse"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loading</span><span class="selector-class">.ball-pulse</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">animation-fill-mode</span>: both;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span><span class="selector-class">.ball-pulse</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: scale .<span class="number">75s</span> -.<span class="number">24s</span> infinite <span class="built_in">cubic-bezier</span>(.2,.68,.18,1.08);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span><span class="selector-class">.ball-pulse</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: scale .<span class="number">75s</span> -.<span class="number">12s</span> infinite <span class="built_in">cubic-bezier</span>(.2,.68,.18,1.08);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loading</span><span class="selector-class">.ball-pulse</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: scale .<span class="number">75s</span> <span class="number">0s</span> infinite <span class="built_in">cubic-bezier</span>(.2,.68,.18,1.08);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> scale&#123;</span><br><span class="line">    0%&#123;</span><br><span class="line">        <span class="attribute">transform</span>:<span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">opacity</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    45%&#123;</span><br><span class="line">        <span class="attribute">transform</span>:<span class="built_in">scale</span>(.1);</span><br><span class="line">        <span class="attribute">opacity</span>:.<span class="number">7</span></span><br><span class="line">    &#125;</span><br><span class="line">    80%&#123;</span><br><span class="line">        <span class="attribute">transform</span>:<span class="built_in">scale</span>(1);</span><br><span class="line">        <span class="attribute">opacity</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="圆环旋转"><a href="#圆环旋转" class="headerlink" title="圆环旋转"></a>圆环旋转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.animateCircle &#123;</span><br><span class="line">-webkit-animation:circle 1s infinite linear;/*匀速 循环*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes circle&#123;</span><br><span class="line">0%&#123; transform:rotate(0deg); &#125;</span><br><span class="line">100%&#123; transform:rotate(-360deg); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本只有两行"><a href="#文本只有两行" class="headerlink" title="文本只有两行"></a>文本只有两行</h3><p><a href="https://segmentfault.com/q/1010000005614773" title="https://segmentfault.com/q/1010000005614773" target="_blank" rel="noopener">https://segmentfault.com/q/1010000005614773</a></p><h3 id="强制换行"><a href="#强制换行" class="headerlink" title="强制换行"></a>强制换行</h3><p><a href="http://www.iwms.net/n1919c40.aspx" title="http://www.iwms.net/n1919c40.aspx" target="_blank" rel="noopener">http://www.iwms.net/n1919c40.aspx</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>面试</title>
      <link href="/2018/10/12/%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/10/12/%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="关于原型链的面试总结"><a href="#关于原型链的面试总结" class="headerlink" title="关于原型链的面试总结"></a>关于原型链的面试总结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function Dog(breed, name)&#123;</span><br><span class="line"> this.breed = breed,</span><br><span class="line"> this.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dog.prototype.describe = function() &#123;</span><br><span class="line"> console.log(`$&#123;this.name&#125; is a $&#123;this.breed&#125;`)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const rusty = new Dog(&apos;Beagle&apos;, &apos;Rusty&apos;);</span><br><span class="line"></span><br><span class="line">/* .prototype property points to an object which has constructor and attached </span><br><span class="line">properties to be inherited by objects created by this constructor. */</span><br><span class="line">console.log(Dog.prototype)  // &#123; describe: ƒ , constructor: ƒ &#125;</span><br><span class="line"></span><br><span class="line">/* Object created from Dog constructor function */</span><br><span class="line">console.log(rusty)   //  &#123; breed: &quot;Beagle&quot;, name: &quot;Rusty&quot; &#125;</span><br><span class="line">/* Object inherited properties from constructor function&apos;s prototype */</span><br><span class="line">console.log(rusty.describe())   // &quot;Rusty is a Beagle&quot;</span><br><span class="line">/* .__proto__ property points to the .prototype property of the constructor function */ </span><br><span class="line">console.log(rusty.__proto__)    // &#123; describe: ƒ , constructor: ƒ &#125;</span><br><span class="line">/* .constructor property points to the constructor of the object */</span><br><span class="line">console.log(rusty.constructor)  // ƒ Dog(breed, name) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ZwZaGfA.png" alt=""></p><ul><li>参考链接<ul><li><a href="https://mp.weixin.qq.com/s/USeD-bnuSPXX8p2HnIrzqQ" target="_blank" rel="noopener">前端面试题“七连击”（一)</a></li><li><a href="https://mp.weixin.qq.com/s/R4msIJru54oowBG9pR3dHw" target="_blank" rel="noopener">前端面试题“七连击”（二)</a></li></ul></li></ul><h3 id="关于Promise-的面试总结"><a href="#关于Promise-的面试总结" class="headerlink" title="关于Promise 的面试总结"></a>关于Promise 的面试总结</h3><p><a href="https://mp.weixin.qq.com/s/nrekW0wPeXQASc3eWK_7Vw" title="https://mp.weixin.qq.com/s/nrekW0wPeXQASc3eWK_7Vw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/nrekW0wPeXQASc3eWK_7Vw</a></p><h3 id="关于网络请求的面试题总结"><a href="#关于网络请求的面试题总结" class="headerlink" title="关于网络请求的面试题总结"></a>关于网络请求的面试题总结</h3><p><a href="https://mp.weixin.qq.com/s/_cfUXkUJJHhih1WkHFBAMg" title="https://mp.weixin.qq.com/s/_cfUXkUJJHhih1WkHFBAMg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/_cfUXkUJJHhih1WkHFBAMg</a></p><h3 id="关于客户端存储的前端面试题总结"><a href="#关于客户端存储的前端面试题总结" class="headerlink" title="关于客户端存储的前端面试题总结"></a>关于客户端存储的前端面试题总结</h3><p><a href="https://mp.weixin.qq.com/s/efJ9r7VyuUKBLADKY-he-Q" title="https://mp.weixin.qq.com/s/efJ9r7VyuUKBLADKY-he-Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/efJ9r7VyuUKBLADKY-he-Q</a></p><h3 id="关于数字的前端面试题"><a href="#关于数字的前端面试题" class="headerlink" title="关于数字的前端面试题"></a>关于数字的前端面试题</h3><p><a href="https://mp.weixin.qq.com/s/-xtFAUmWbIOvjgpgS0-EmQ" title="https://mp.weixin.qq.com/s/-xtFAUmWbIOvjgpgS0-EmQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/-xtFAUmWbIOvjgpgS0-EmQ</a></p><h3 id="关于数据类型转换的面试题总结"><a href="#关于数据类型转换的面试题总结" class="headerlink" title="关于数据类型转换的面试题总结"></a>关于数据类型转换的面试题总结</h3><p><a href="https://mp.weixin.qq.com/s/VoPCr4PgH_bRsOi907BzJg" title="https://mp.weixin.qq.com/s/VoPCr4PgH_bRsOi907BzJg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/VoPCr4PgH_bRsOi907BzJg</a></p><h3 id="别人家的面经"><a href="#别人家的面经" class="headerlink" title="别人家的面经"></a>别人家的面经</h3><ul><li><a href="https://github.com/54017/blog/issues/1" target="_blank" rel="noopener">阿里巴巴前端面试经历</a></li><li><a href="https://mp.weixin.qq.com/s/wSnU06Xf1CQbP3lPIe475w" target="_blank" rel="noopener">JavaScript权威面试指南</a></li><li><a href="https://github.com/Sherrytq/FE-Cookbook" target="_blank" rel="noopener">FE-Cookbook</a></li><li><a href="https://www.tuicool.com/articles/FBZNBjZ" target="_blank" rel="noopener">2016 校招 阿里巴巴</a></li><li><a href="http://www.nowcoder.com/discuss/1805" target="_blank" rel="noopener">2015 实习 腾讯</a></li><li><a href="http://zhangwenli.com/blog/2015/04/01/2015-front-end-engineer-interview/" target="_blank" rel="noopener">2015 实习 阿里+百度</a></li><li><a href="http://www.cnblogs.com/syfwhu/p/4328967.html" target="_blank" rel="noopener">最全前端面试问题及答案总结–《转载》</a></li><li><a href="http://www.cnblogs.com/syfwhu/p/4434132.html" target="_blank" rel="noopener">常见前端面试题及答案</a></li><li><a href="http://developer.51cto.com/art/201504/472172.htm" target="_blank" rel="noopener">2015 实习 腾讯</a></li><li><a href="http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/" target="_blank" rel="noopener">经典的排序算法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>总结</title>
      <link href="/2018/10/12/conclutions/"/>
      <url>/2018/10/12/conclutions/</url>
      
        <content type="html"><![CDATA[<h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><ul><li>参考链接： <a href="https://github.com/ecomfe/spec" target="_blank" rel="noopener">https://github.com/ecomfe/spec</a></li></ul><h3 id="typeof-and-instanceof"><a href="#typeof-and-instanceof" class="headerlink" title="typeof and instanceof"></a><code>typeof</code> and <code>instanceof</code></h3><p><code>typeof</code>  undefined boolean number string object function、symbol</p><p><code>instanceof</code> 实例跟构造函数的对应</p><h3 id="引用类型-and-值类型"><a href="#引用类型-and-值类型" class="headerlink" title="引用类型 and 值类型"></a>引用类型 and 值类型</h3><ul><li>引用类型 ： Function Object Array </li><li><p>值类型： Boolean String Number Undefined Null </p><h3 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h3><p><img src="/Users/sherry/Library/Application Support/typora-user-images/image-20181016190204658.png" alt="image-20181016190204658"></p></li></ul><p>对于这个问题，可以从下面这几个要点来理解和回答，下面几条必须记住并且理解  </p><ul><li>所有的引用类型（数组、对象、函数)，都具有对象特性，即可自由扩展属性（除了<code>null</code>以外） </li><li>所有的引用类型（数组、对象、函数)，都有一个<code>__proto__</code> 属性，属性值是一个普通的对象</li><li>所有的函数，都有一个<code>prototype</code>属性，属性值也是一个普通的对象</li><li>所有的引用类型（数组、对象、函数)，<code>__proto__</code>属性值指向它的构造函数的<code>prototyep</code>属性值</li><li>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<code>__proto__</code> （即它的构造函数的<code>prototype</code>）中寻找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.alertName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>, <span class="keyword">this</span>) <span class="comment">//6 Foo &#123;name: "zhangsan", printName: ƒ&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">7</span>,<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建示例</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Foo(<span class="string">'zhangsan'</span>)</span><br><span class="line">f.printName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>, <span class="keyword">this</span>) <span class="comment">//5 Foo &#123;name: "zhangsan", printName: ƒ&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>,<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">f.printName()</span><br><span class="line">f.alertName()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要点二：__proto__</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>, Foo.__proto__); <span class="comment">//1 ƒ () &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>, f.__proto__); <span class="comment">//2 &#123;alertName: ƒ, constructor: ƒ&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要点三：函数有 prototype</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>, Foo.prototype) <span class="comment">//3 &#123;alertName: ƒ, constructor: ƒ&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>, f.prototype) <span class="comment">//4 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断这个属性是不是对象本身的属性hasOwnProperty</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var item</span></span><br><span class="line"><span class="comment">// for (item in f) &#123;</span></span><br><span class="line"><span class="comment">//     // 高级浏览器已经在 for in 中屏蔽了来自原型的属性，但是这里建议大家还是加上这个判断，保证程序的健壮性</span></span><br><span class="line"><span class="comment">//     if (f.hasOwnProperty(item)) &#123;</span></span><br><span class="line"><span class="comment">//         console.log(item)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="built_in">console</span>.log(Foo.hasOwnProperty(<span class="string">'printName'</span>))</span><br></pre></td></tr></table></figure><p>原型链的终点： <code>Object.prototype.__proto__ === null</code></p><h3 id="前端异步的场景"><a href="#前端异步的场景" class="headerlink" title="前端异步的场景"></a>前端异步的场景</h3><ul><li>定时 setTimeout setInterval  </li><li>网络请求，如 Ajax  img加载</li></ul><h3 id="圣杯布局和双飞翼布局"><a href="#圣杯布局和双飞翼布局" class="headerlink" title="圣杯布局和双飞翼布局"></a>圣杯布局和双飞翼布局</h3><p><a href="https://juejin.im/entry/5a8868cdf265da4e7e10c133?utm_source=gold_browser_extension" title="https://juejin.im/entry/5a8868cdf265da4e7e10c133?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.im/entry/5a8868cdf265da4e7e10c133?utm_source=gold_browser_extension</a></p><h3 id="fetch-请求数据"><a href="#fetch-请求数据" class="headerlink" title="fetch 请求数据"></a><code>fetch</code> 请求数据</h3><h3 id="SVN-和-Git-的区别"><a href="#SVN-和-Git-的区别" class="headerlink" title="SVN 和 Git 的区别"></a>SVN 和 Git 的区别</h3><p> SVN 是每一步操作都离不开服务器，创建分支、提交代码都需要连接服务器。而 Git 就不一样了，你可以在本地创建分支、提交代码，最后再一起 push 到服务器上。因此，Git 拥有 SVN 的所有功能，但是却比 SVN 强大得多。（Git 是 Linux 的创始人 Linus 发明的东西，因此也倍得推崇。）</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p><img src="https://i.imgur.com/jojjnCD.png" alt=""></p><h3 id="CommonJS-CJS-node-js"><a href="#CommonJS-CJS-node-js" class="headerlink" title="CommonJS (CJS node.js)"></a>CommonJS (CJS node.js)</h3><p>   EcmaScript modules( ESM )<br>三个步骤 ： </p><ul><li>构建：查找，下载，然后把所有文件解析成模块记录。</li><li>实例化：为所有模块分配内存空间（此刻还没有填充值），然后依照导出、导入语句把模块指向对应的内存地址。这个过程称为链接（Linking）。</li><li><p>运行：运行代码，从而把内存空间填充为真实值。</p></li><li><p>CJS 同步 使用不同的算法  返回模块实例之前，顺着整颗依赖树去逐一加载、实例化和运行每一个依赖</p></li><li>ESM 异步 把算法化为多个阶段</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.zhihu.com/question/22689579" target="_blank" rel="noopener">Web 建站技术中，HTML、HTML5、XHTML、CSS、SQL、JavaScript、PHP、ASP.NET、Web Services 是什么？</a> </li><li><a href="https://mp.weixin.qq.com/s/lohBbUsVQyIhKcMMUFRZGg" target="_blank" rel="noopener">import、require、export、module.exports 混合详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Handlebars</title>
      <link href="/2018/10/12/handlebars/"/>
      <url>/2018/10/12/handlebars/</url>
      
        <content type="html"><![CDATA[<h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p>Handlebars.js是一款基于Jquery的插件，以json对象为数据源，支持逻辑判断、循环等操作，同时具有非常好的扩展性，体积60KB左右， 是一款js模版引擎。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原生方法</span></span><br><span class="line"><span class="keyword">var</span> source = <span class="built_in">document</span>.getElementById(<span class="string">'#tpl'</span>).innerHTML;</span><br><span class="line"><span class="comment">//预编译模板</span></span><br><span class="line"><span class="keyword">var</span> template = Handlebars.compile(source);</span><br><span class="line"><span class="comment">//模拟json数据</span></span><br><span class="line"><span class="keyword">var</span> context = &#123; <span class="attr">name</span>: <span class="string">"zhaoshuai"</span>, <span class="attr">content</span>: <span class="string">"learn Handlebars"</span>&#125;;</span><br><span class="line"><span class="comment">//匹配json内容</span></span><br><span class="line"><span class="keyword">var</span> html = template(context);</span><br><span class="line"><span class="comment">//输入模板</span></span><br><span class="line">$(body).html(html);</span><br></pre></td></tr></table></figure></p><h3 id="registerHelper-可以自定义函数"><a href="#registerHelper-可以自定义函数" class="headerlink" title="registerHelper 可以自定义函数"></a><code>registerHelper</code> 可以自定义函数</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> student&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;sex&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;age&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;&#123;#<span class="name">compare</span> age 20&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;homePage&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123;<span class="builtin-name">else</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;&#123;homePage&#125;&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;&#123;/<span class="name">compare</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">"compare"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">v1,v2,options</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断v1是否比v2大</span></span><br><span class="line">    <span class="keyword">if</span>(v1&gt;v2)&#123;</span><br><span class="line">        <span class="comment">//继续执行</span></span><br><span class="line">        <span class="keyword">return</span> options.fn(<span class="keyword">this</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//执行else部分</span></span><br><span class="line">        <span class="keyword">return</span> options.inverse(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>Handlebars</code> </p><ul><li>核心： 样式和逻辑进行分离，先将样式渲染到页面，才可能获取到dom 元素，然后才能进行dom 操作，</li><li>优点： 将样式和逻辑进行了分离，很像react的思想，使项目的结构更加清楚，也很适合团队合作</li><li>缺点： <blockquote><ul><li>组件间有关联时，尤其是遇到请求数据的情况，很难确认哪个组件先获取数据，先进行渲染  </li><li>方法：<br>先进行dom 元素渲染，在插入数据<br>运用返回函数，在第二的请求函数中调用第一个组件的函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stock.getSingleCodeName(stockCode,<span class="function"><span class="keyword">function</span>(<span class="params">stockName</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#backTobar"</span>).html(<span class="string">'返回'</span>+stockName+<span class="string">'吧&gt;&gt;'</span>) ;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><p>（2） 组件中请求数据后需要进行dom操作</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://caibaojian.com/handlebars-js.html" target="_blank" rel="noopener">Handlebars.js 模板引擎</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Handlebars </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jquery</title>
      <link href="/2018/10/12/jquery/"/>
      <url>/2018/10/12/jquery/</url>
      
        <content type="html"><![CDATA[<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>这里需要注意 jQuery 分 2 个系列版本 1.x 与 2.x，主要的区别在于 2.x 不再兼容 IE6、7、8浏览器，这样做的目的是为了兼容移动端开发。</p><p>抛开jQuery，如果要获取文档中所有的元素，通过document.getElementsByTagName()中传递”*”同样可以获取到</p><p>不难发现，id、class、tag都可以通过原生的方法获取到对应的节点，但是我们还需要考虑一个兼容性的问题，我这里顺便提及一下，比如:</p><p>IE会将注释节点实现为元素，所以在IE中调用getElementsByTagName里面会包含注释节点，这个通常是不应该的<br>getElementById的参数在IE8及较低的版本不区分大小写<br>IE7及较低的版本中，表单元素中，如果表单A的name属性名用了另一个元素B的ID名并且A在B之前，那么getElementById会选中A<br>IE8及较低的版本，浏览器不支持getElementsByClassName</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p><img src="https://i.imgur.com/F2ojRUv.png" alt="层级选择器"></p><p><img src="https://i.imgur.com/XqL9Uqf.png" alt="筛选选择器"></p><ul><li>注意事项：<br>:eq(), :lt(), :gt(), :even, :odd 用来筛选他们前面的匹配表达式的集合元素，根据之前匹配的元素在进一步筛选，注意jQuery合集都是从0开始索引<br>gt是一个段落筛选，从指定索引的下一个开始，gt(1) 实际从2开始<br><img src="https://i.imgur.com/bzCHRXJ.png" alt="内容筛选选择器"></li><li><p>注意事项：<br>:contains与:has都有查找的意思，但是contains查找包含“指定文本”的元素，has查找包含“指定元素”的元素<br>如果:contains匹配的文本包含在元素的子元素中，同样认为是符合条件的。<br>:parent与:empty是相反的，两者所涉及的子元素，包括文本节点<br><img src="https://i.imgur.com/8nDN5wV.png" alt="可见性筛选选择器"></p></li><li><p>我们有几种方式可以隐藏一个元素：<br>CSS display的值是none。<br>type=”hidden”的表单元素。<br>宽度和高度都显式设置为0。<br>一个祖先元素是隐藏的，该元素是不会在页面上显示<br>CSS visibility的值是hidden<br>CSS opacity的指是0</p></li></ul><p><img src="https://i.imgur.com/w8cC8fD.png" alt="属性筛选选择器"></p><p><img src="https://i.imgur.com/YHtUz5u.png" alt="子元素筛选选择器"><br>注意事项：</p><p>:first只匹配一个单独的元素，但是:first-child选择器可以匹配多个：即为每个父级元素匹配第一个子元素。这相当于:nth-child(1)<br>:last 只匹配一个单独的元素， :last-child 选择器可以匹配多个元素：即，为每个父级元素匹配最后一个子元素<br>如果子元素只有一个的话，:first-child与:last-child是同一个<br> :only-child匹配某个元素是父元素中唯一的子元素，就是说当前子元素是父元素中唯一的元素，则匹配<br>jQuery实现:nth-child(n)是严格来自CSS规范，所以n值是“索引”，也就是说，从1开始计数，:nth-child(index)从1开始的，而eq(index)是从0开始的<br>nth-child(n) 与 :nth-last-child(n) 的区别前者是从前往后计算，后者从后往前计算</p><p><img src="https://i.imgur.com/OTW5asM.png" alt="表单元素选择器"></p><h3 id="jq-中的-this"><a href="#jq-中的-this" class="headerlink" title="jq 中的 this"></a>jq 中的 <code>this</code></h3><p><code>this</code>，表示当前的上下文对象是一个html对象，可以调用html对象所拥有的属性和方法。<br><code>$(this)</code>,代表的上下文对象是一个jquery的上下文对象，可以调用jQuery的方法和属性值。</p><h3 id="html-text-和-val-的差异总结："><a href="#html-text-和-val-的差异总结：" class="headerlink" title=".html(),.text()和.val()的差异总结："></a>.html(),.text()和.val()的差异总结：</h3><ul><li>.html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容（包括html标签），.text()用来读取元素的纯文本内容，包括其后代元素，.val()是用来读取表单元素的”value”值。其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，如果其应用在多个元素上时，只能读取第一个表单元素的”value”值，但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容。</li><li>.html(htmlString),.text(textString)和.val(value)三种方法都是用来替换选中元素的内容，如果三个方法同时运用在多个元素上时，那么将会替换所有选中元素的内容。</li><li>.html(),.text(),.val()都可以使用回调函数的返回值来动态的改变多个元素的内容。</li></ul><h3 id="jQuery的属性与样式之-css-与-addClass-设置样式的区别"><a href="#jQuery的属性与样式之-css-与-addClass-设置样式的区别" class="headerlink" title="jQuery的属性与样式之.css()与.addClass()设置样式的区别"></a>jQuery的属性与样式之.css()与.addClass()设置样式的区别</h3><p>对于样式的设置，我们学了addClass与css方法，那么两者之间有什么区别？</p><p>可维护性：</p><p>.addClass()的本质是通过定义个class类的样式规则，给元素添加一个或多个类。css方法是通过JavaScript大量代码进行改变元素的样式</p><p>通过.addClass()我们可以批量的给相同的元素设置统一规则，变动起来比较方便，可以统一修改删除。如果通过.css()方法就需要指定每一个元素是一一的修改，日后维护也要一一的修改，比较麻烦</p><p>灵活性：</p><p>通过.css()方式可以很容易动态的去改变一个样式的属性，不需要在去繁琐的定义个class类的规则。一般来说在不确定开始布局规则，通过动态生成的HTML代码结构中，都是通过.css()方法处理的</p><p>样式值：</p><p>.addClass()本质只是针对class的类的增加删除，不能获取到指定样式的属性的值，.css()可以获取到指定的样式值。</p><p>样式的优先级：</p><p>css的样式是有优先级的，当外部样式、内部样式和内联样式同一样式规则同时应用于同一个元素的时候，优先级如下</p><p>外部样式 &lt; 内部样式 &lt; 内联样式<br>.addClass()方法是通过增加class名的方式，那么这个样式是在外部文件或者内部样式中先定义好的，等到需要的时候在附加到元素上<br>通过.css()方法处理的是内联样式，直接通过元素的style属性附加到元素上的<br>通过.css方法设置的样式属性优先级要高于.addClass方法<br>总结：</p><p>.addClass与.css方法各有利弊，一般是静态的结构，都确定了布局的规则，可以用addClass的方法，增加统一的类规则<br>如果是动态的HTML结构，在不确定规则，或者经常变化的情况下，一般多考虑.css()方式</p><h3 id="DOM节点删除之empty和remove区别"><a href="#DOM节点删除之empty和remove区别" class="headerlink" title="DOM节点删除之empty和remove区别"></a>DOM节点删除之empty和remove区别</h3><p>要用到移除指定元素的时候，jQuery提供了empty()与remove([expr])二个方法，两个都是删除元素，但是两者还是有区别</p><p>empty方法</p><p>严格地讲，empty()方法并不是删除节点，而是清空节点，它能清空元素中的所有后代节点<br>empty不能删除自己本身这个节点<br>remove方法</p><p>该节点与该节点所包含的所有后代节点将同时被删除<br>提供传递一个筛选的表达式，删除指定合集中的元素</p><h3 id="DOM节点删除之detach-和remove-区别"><a href="#DOM节点删除之detach-和remove-区别" class="headerlink" title="DOM节点删除之detach()和remove()区别"></a>DOM节点删除之detach()和remove()区别</h3><p>JQuery是一个很大强的工具库，在工作开发中，有些方法因为不常用到，或是没有注意到而被我们忽略。</p><p>remove()和detach()可能就是其中的一个，可能remove()我们用得比较多，而detach()就可能会很少了</p><p> 通过一张对比表来解释2个方法之间的不同<br><img src="https://i.imgur.com/STH7sr4.png" alt=""></p><p>remove：移除节点</p><p>无参数，移除自身整个节点以及该节点的内部的所有节点，包括节点上事件与数据<br>有参数，移除筛选出的节点以及该节点的内部的所有节点，包括节点上事件与数据<br>detach：移除节点</p><p>移除的处理与remove一致<br>与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来<br>例如：$(“p”).detach()这一句会移除对象，仅仅是显示效果没有了。但是内存中还是存在的。当你append之后，又重新回到了文档流中。就又显示出来了。<br>具体可以参考右边的代码区域的对比</p><h3 id="parents-和-closest-是有点相似的，都是往上遍历祖辈元素，但是两者还是有区别的，否则就没有存在的意义了"><a href="#parents-和-closest-是有点相似的，都是往上遍历祖辈元素，但是两者还是有区别的，否则就没有存在的意义了" class="headerlink" title=".parents()和.closest()是有点相似的，都是往上遍历祖辈元素，但是两者还是有区别的，否则就没有存在的意义了"></a>.parents()和.closest()是有点相似的，都是往上遍历祖辈元素，但是两者还是有区别的，否则就没有存在的意义了</h3><p>起始位置不同：.closest开始于当前元素 .parents开始于父元素<br>遍历的目标不同：.closest要找到指定的目标，.parents遍历到文档根元素，closest向上查找，直到找到一个匹配的就停止查找，parents一直查找到根元素，并将匹配的元素加入集合<br>结果不同：.closest返回的是包含零个或一个元素的jquery对象，parents返回的是包含零个或一个或多个元素的jquery对象</p><h3 id="mouseenter事件和mouseover的区别"><a href="#mouseenter事件和mouseover的区别" class="headerlink" title="mouseenter事件和mouseover的区别"></a>mouseenter事件和mouseover的区别</h3><p>关键点就是：冒泡的方式处理问题<br>简单的例子：</p><p>mouseover为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;aaron2&quot;&gt;</span><br><span class="line">    &lt;p&gt;鼠标离开此区域触发mouseleave事件&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>如果在p元素与div元素都绑定mouseover事件，鼠标在离开p元素，但是没有离开div元素的时候，触发的结果:</p><p>p元素响应事件<br>div元素响应事件<br>这里的问题是div为什么会被触发？ 原因就是事件冒泡的问题，p元素触发了mouseover，他会一直往上找父元素上的mouseover事件，如果父元素有mouseover事件就会被触发</p><p>所以在这种情况下面，jQuery推荐我们使用 mouseenter事件</p><p>mouseenter事件只会在绑定它的元素上被调用，而不会在后代节点上被触发</p><p>这就是最本质的区别，具体的对应可以参考右边的案例：</p><h3 id="trigger触发浏览器事件与自定义事件区别？"><a href="#trigger触发浏览器事件与自定义事件区别？" class="headerlink" title="trigger触发浏览器事件与自定义事件区别？"></a>trigger触发浏览器事件与自定义事件区别？</h3><p>自定义事件对象，是jQuery模拟原生实现的<br>自定义事件可以传递参数</p><p>triggerHandler与trigger的用法是一样的，重点看不同之处：</p><p>triggerHandler不会触发浏览器的默认行为，.triggerHandler( “submit” )将不会调用表单上的.submit()<br>.trigger() 会影响所有与 jQuery 对象相匹配的元素，而 .triggerHandler() 仅影响第一个匹配到的元素<br>使用 .triggerHandler() 触发的事件，并不会在 DOM 树中向上冒泡。 如果它们不是由目标元素直接触发的，那么它就不会进行任何处理<br>与普通的方法返回 jQuery 对象(这样就能够使用链式用法)相反，.triggerHandler() 返回最后一个处理的事件的返回值。如果没有触发任何事件，会返回 undefined</p><h3 id="添加函数"><a href="#添加函数" class="headerlink" title="添加函数"></a>添加函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    $.fn.extend(&#123;</span><br><span class="line">        <span class="string">'focusColor'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newColor</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> oldColor = $(<span class="keyword">this</span>).css(<span class="string">'background-color'</span>);</span><br><span class="line">            $(<span class="keyword">this</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                $(<span class="keyword">this</span>).css(...)</span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).css(..)</span><br><span class="line">                &#125;</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>)</span><br><span class="line">            &#125;</span><br><span class="line">                          &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;)(jquery)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo + github 搭建个人博客</title>
      <link href="/2018/10/12/blog/"/>
      <url>/2018/10/12/blog/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo-github"><a href="#Hexo-github" class="headerlink" title="Hexo + github"></a>Hexo + github</h3><p>参考链接:  </p><ul><li><a href="http://threehao.com/2016/08/22/Github%20Pages%20+%20Hexo/" target="_blank" rel="noopener">利用Github Pages + Hexo搭建个人博客</a></li></ul><h3 id="Hexo-学习"><a href="#Hexo-学习" class="headerlink" title="Hexo 学习"></a>Hexo 学习</h3><ul><li><p>参考链接  <a href="https://hexo.io/zh-cn/docs/templates.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/templates.html</a> </p></li><li><p>命令： </p><ul><li>Hexo –g  生成文件  </li><li>Hexo –s  启动服务器    </li><li>Hexo d –g  发布</li></ul></li></ul><h3 id="Hexo-自定义主题"><a href="#Hexo-自定义主题" class="headerlink" title="Hexo 自定义主题"></a>Hexo 自定义主题</h3><p>参考链接 <a href="https://segmentfault.com/a/1190000006057336" title=" https://segmentfault.com/a/1190000006057336" target="_blank" rel="noopener"> https://segmentfault.com/a/1190000006057336</a>  </p><ul><li>ejs 模板语言使用<br>参考链接:  <a href="https://www.w3cschool.cn/weflow/weflow-ejs.html" title="https://www.w3cschool.cn/weflow/weflow-ejs.html " target="_blank" rel="noopener">https://www.w3cschool.cn/weflow/weflow-ejs.html </a> </li><li>pug 使用  <ul><li>参考连接: <ul><li><a href="https://www.cnblogs.com/xiaohuochai/p/7222227.html" target="_blank" rel="noopener">pug模板引擎(原jade)</a></li></ul></li></ul></li></ul><h3 id="hexo-添加评论功能"><a href="#hexo-添加评论功能" class="headerlink" title="hexo 添加评论功能"></a>hexo 添加评论功能</h3><p>Maupassant 主题支持 disqus uyan livere changyan gitment gitalk valine 等评论功能  </p><p>参考链接： </p><ul><li><a href="https://blog.csdn.net/ganzhilin520/article/details/79048010" target="_blank" rel="noopener">hexo添加评论功能</a></li></ul><h3 id="Hexo-maupassant-主题"><a href="#Hexo-maupassant-主题" class="headerlink" title="Hexo maupassant 主题"></a>Hexo maupassant 主题</h3><ul><li>参考链接<ul><li><a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">大道至简——Hexo简洁主题推荐</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React_03</title>
      <link href="/2018/10/12/React_03/"/>
      <url>/2018/10/12/React_03/</url>
      
        <content type="html"><![CDATA[<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://i.imgur.com/EDLTVAG.png" alt="生命周期">{:height=”50%” width=”50%”}</p><h3 id="react-responsive适配移动端与PC端"><a href="#react-responsive适配移动端与PC端" class="headerlink" title="react-responsive适配移动端与PC端"></a>react-responsive适配移动端与PC端</h3><p> <img src="https://i.imgur.com/bYDkesO.png" alt=""></p><h3 id="react-组件为什么从o-n-3-到o-n"><a href="#react-组件为什么从o-n-3-到o-n" class="headerlink" title="react 组件为什么从o(n^3) 到o(n)"></a>react 组件为什么从o(n^3) 到o(n)</h3><ul><li>传统算法就是对每个节点一一对比，循环遍历所有的子节点，然后判断子节点的更新状态，分别为remove、add、change。</li><li>react 只比较不同的节点</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://segmentfault.com/a/1190000004913592" target="_blank" rel="noopener">react 精髓- diff 算法</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React_02</title>
      <link href="/2018/10/12/React_02/"/>
      <url>/2018/10/12/React_02/</url>
      
        <content type="html"><![CDATA[<h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><ul><li>数据流是行为和相应的抽象</li><li>使用数据流可以帮助我们明确行为对应的响应<br><img src="https://i.imgur.com/V1SRklI.png" alt="单向数据流"></li></ul><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p><img src="https://i.imgur.com/PflASy2.png =10x" alt="Redux概述"></p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p><img src="https://i.imgur.com/zSusxXo.png" alt="组件"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue</title>
      <link href="/2018/10/12/Vue/"/>
      <url>/2018/10/12/Vue/</url>
      
        <content type="html"><![CDATA[<h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><ul><li>数据驱动 </li><li>组件化</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="https://i.imgur.com/xnumWs2.png" alt="vue生命周期"> </p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>Vue.js提供了一些常用的内置指令，接下来我们将介绍以下几个内置指令：</p><ul><li>v-if指令</li><li>v-show指令</li><li>v-else指令</li><li>v-for指令</li><li>v-bind指令</li><li>v-on指令</li></ul><p><code>v-if</code>是条件渲染指令，它根据表达式的真假来删除和插入元素<br><code>v-show</code>也是条件渲染指令，和<code>v-if</code>指令不同的是，使用<code>v-show</code>指令的元素始终会被渲染到HTML，它只是简单地为元素设置CSS的style属性。<br><code>v-else</code>指令为<code>v-if</code>或<code>v-show</code>添加一个“else块”。<code>v-else</code>元素必须立即跟在<code>v-if</code>或<code>v-show</code>元素的后面——否则它不能被识别。<br><code>v-for</code>指令基于一个数组渲染一个列表，它和JavaScript的遍历语法相似：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-for=&quot;item in items&quot;</span><br></pre></td></tr></table></figure></p><p>items是一个数组，item是当前被遍历的数组元素。</p><p><code>v-bind</code>指令可以在其名称后面带一个参数，中间放一个冒号隔开，这个参数通常是HTML元素的特性（attribute），例如：<code>v-bind:class</code> <code>v-bind:argument=&quot;expression&quot;</code></p><p><code>v-on</code>指令用于给监听DOM事件，它的用语法和<code>v-bind</code>是类似的，例如监听<code>&lt;a&gt;</code>元素的点击事件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;</span><br></pre></td></tr></table></figure><p>有两种形式调用方法：绑定一个方法（让事件指向方法的引用），或者使用内联语句。</p><p>Vue.js为最常用的两个指令<code>v-bind</code>和<code>v-on</code>提供了缩写方式。<code>v-bind</code>指令可以缩写为一个冒号，<code>v-on</code>指令可以缩写为<code>@</code>符号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--完整语法--&gt;</span><br><span class="line">&lt;a href=&quot;javascripit:void(0)&quot; v-bind:class=&quot;activeNumber === n + 1 ? &apos;active&apos; : &apos;&apos;&quot;&gt;&#123;&#123; n + 1 &#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;!--缩写语法--&gt;</span><br><span class="line">&lt;a href=&quot;javascripit:void(0)&quot; :class=&quot;activeNumber=== n + 1 ? &apos;active&apos; : &apos;&apos;&quot;&gt;&#123;&#123; n + 1 &#125;&#125;&lt;/a&gt;</span><br><span class="line">&lt;!--完整语法--&gt;</span><br><span class="line">&lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">&lt;!--缩写语法--&gt;</span><br><span class="line">&lt;button @click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><h3 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h3><p>在子组件中定义props，可以让父组件的数据传递下来<br>今天我们将着重介绍slot和父子组件之间的访问和通信，slot是一个非常有用的东西，它相当于一个内容插槽，它是我们重用组件的基础。Vue的事件系统独立于原生的DOM事件，它用于组件之间的通信<br>本文的主要内容如下：</p><ul><li>组件的编译作用域</li><li>在组件template中使用<slot>标签作为内容插槽</slot></li><li>使用$children, $refs, $parent 实现父子组件之间的实例访问</li><li>在子组件中，使用$dispatch向父组件派发事件；在父组件中，使用$broadcast向子组件传播事件</li><li>结合这些基础知识，我们一步一步实现一个CURD的示例</li></ul><p>有时候我们需要父组件访问子组件，子组件访问父组件，或者是子组件访问根组件。<br>针对这几种情况，Vue.js都提供了相应的API：</p><ul><li>父组件访问子组件：使用$children或$refs</li><li>子组件访问父组件：使用$parent</li><li>子组件访问根组件：使用$root</li></ul><p>注意：尽管可以访问父链上任意的实例，不过子组件应当避免直接依赖父组件的数据，尽量显式地使用 props 传递数据。另外，在子组件中修改父组件的状态是非常糟糕的做法，因为： </p><ul><li>这让父组件与子组件紧密地耦合； </li><li>只看父组件，很难理解父组件的状态。因为它可能被任意子组件修改！理想情况下，只有组件自己能修改它的状态。</li></ul><p>有时候我们希望触发父组件的某个事件时，可以通知到子组件；触发子组件的某个事件时，可以通知到父组件<br>Vue 实例实现了一个自定义事件接口，用于在组件树中通信。这个事件系统独立于原生 DOM 事件，用法也不同。<br>每个 Vue 实例都是一个事件触发器：</p><ul><li>使用 $on() 监听事件；</li><li>使用 $emit() 在它上面触发事件；</li><li>使用 $dispatch() 派发事件，事件沿着父链冒泡；</li><li>使用 $broadcast() 广播事件，事件向下传导给所有的后代。</li></ul><h3 id="组件的创建与注册"><a href="#组件的创建与注册" class="headerlink" title="组件的创建与注册"></a>组件的创建与注册</h3><p>Vue.js的组件的使用有3个步骤：创建组件构造器、注册组件和使用组件。<br><img src="https://i.imgur.com/0REImoZ.png" alt="组件的创建与注册"></p><p>我们用以下几个步骤来理解组件的创建和注册：</p><ol><li>Vue.extend()是Vue构造器的扩展，调用Vue.extend()创建的是一个组件构造器。 </li><li>Vue.extend()构造器有一个选项对象，选项对象的template属性用于定义组件要渲染的HTML。 </li><li>使用Vue.component()注册组件时，需要提供2个参数，第1个参数时组件的标签，第2个参数是组件构造器。 </li><li>组件应该挂载到某个Vue实例下，否则它不会生效。</li></ol><p>Vue.js规定：在定义组件的选项时，data和el选项必须使用函数。<br>组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。</p><p>注意：在子组件中定义prop时，使用了camelCase命名法。由于HTML特性不区分大小写，camelCase的prop用于特性时，需要转为 kebab-case（短横线隔开）。例如，在prop中定义的myName，在用作特性时需要转换为my-name。</p><p><code>&lt;child-component v-bind:子组件prop=&quot;父组件数据属性&quot;&gt;&lt;/child-component&gt;</code></p><p><code>prop</code>默认是单向绑定：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意修改了父组件的状态</p><ul><li>双向绑定<br>可以使用<code>.sync</code>显式地指定双向绑定，这使得子组件的数据修改会回传给父组件。<br><code>&lt;my-component v-bind:my-name.sync=&quot;name&quot; v-bind:my-age.sync=&quot;age&quot;&gt;&lt;/my-component&gt;</code></li><li>单次绑定<br>可以使用<code>.once</code>显式地指定单次绑定，单次绑定在建立之后不会同步之后的变化，这意味着即使父组件修改了数据，也不会传导给子组件。<br><code>&lt;my-component v-bind:my-name.once=&quot;name&quot; v-bind:my-age.once=&quot;age&quot;&gt;&lt;/my-component&gt;</code></li></ul><p>Vue.js组件的API来源于三部分——prop，slot和事件。</p><ul><li>prop 允许外部环境传递数据给组件；</li><li>事件 允许组件触发外部环境的 action；</li><li>slot 允许外部环境插入内容到组件的视图结构内。</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://cn.vuejs.org/v2/guide/syntax.html" target="_blank" rel="noopener">Vue 官方说明</a><br><a href="http://www.cnblogs.com/keepfool/p/5619070.html" target="_blank" rel="noopener">Vue 60分钟快速入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ajax</title>
      <link href="/2018/10/12/ajax/"/>
      <url>/2018/10/12/ajax/</url>
      
        <content type="html"><![CDATA[<h3 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h3><ul><li>创建</li></ul><p><img src="https://i.imgur.com/47DAbrB.png" alt=""></p><h3 id="HTTP-请求"><a href="#HTTP-请求" class="headerlink" title="HTTP 请求"></a>HTTP 请求</h3><p><img src="https://i.imgur.com/oWdN0cA.png" alt=""><br><img src="https://i.imgur.com/TLlQZ9m.png" alt=""><br><img src="https://i.imgur.com/DVzyPBI.png" alt=""><br><img src="https://i.imgur.com/l782mVt.png" alt=""><br><img src="https://i.imgur.com/lokZH1v.png" alt=""><br><img src="https://i.imgur.com/dVtnAMe.png" alt=""><br><img src="https://i.imgur.com/W0yjsIp.png" alt=""><br><img src="https://i.imgur.com/1s1acdb.png" alt=""><br><img src="https://i.imgur.com/cb0XQv7.png" alt=""></p><h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p><img src="https://i.imgur.com/NDu8gJA.png" alt=""><br><img src="https://i.imgur.com/04Pjcqy.png" alt=""><br>JSONP 只支持GET请求，返回的是一个数组<br><img src="https://i.imgur.com/KXSZlAX.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React_01</title>
      <link href="/2018/10/12/React_01/"/>
      <url>/2018/10/12/React_01/</url>
      
        <content type="html"><![CDATA[<h3 id="React-知识"><a href="#React-知识" class="headerlink" title="React 知识"></a>React 知识</h3><p>React 的核心思想是：封装组件。<br>各个组件维护自己的状态和 UI，当状态变更，自动重新渲染整个组件。<br>基于这种方式的一个直观感受就是我们不再需要不厌其烦地来回查找某个 DOM 元素，然后操作 DOM 去更改 UI。</p><h3 id="React-大体包含的概念"><a href="#React-大体包含的概念" class="headerlink" title="React 大体包含的概念"></a>React 大体包含的概念</h3><ul><li><strong>组件</strong></li><li><strong>JSX</strong></li><li><strong>Virtual DOM</strong> </li><li><strong>Data Flow</strong></li></ul><h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><p><img src="http://upload-images.jianshu.io/upload_images/8952934-6183b3ea3c3749c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://i.imgur.com/HBH9ySZ.png" alt="流"></p><h3 id="React-router"><a href="#React-router" class="headerlink" title="React-router"></a>React-router</h3><p>可参考<a href="https://segmentfault.com/a/1190000004075348" target="_blank" rel="noopener">React-router</a></p><h3 id="React-基本知识"><a href="#React-基本知识" class="headerlink" title="React 基本知识"></a>React 基本知识</h3><p><img src="https://i.imgur.com/EZnakf8.png" alt="">  </p><p><img src="https://i.imgur.com/0qwoWvM.png" alt=""></p><p><img src="https://i.imgur.com/ZH0TlBZ.png" alt=""></p><p><img src="https://i.imgur.com/Nm4Ger0.png" alt=""></p><p><img src="https://i.imgur.com/EzXrPJv.png" alt=""></p><p><img src="https://i.imgur.com/SLit5kb.png" alt=""></p><p><img src="https://i.imgur.com/HQSnC5O.png" alt=""></p><h3 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h3><p>React中组件通信的三种方法：</p><ul><li>使用props，构建通信链</li><li>在组件初始化的时候，保存组件的句柄，在其它组件中，使用此句柄达到直接访问组件的目的，完成通信</li><li>使用PubSub模式</li></ul><p>第1种方式，在组件嵌套较深时，显示不适用。<br>第2种在组件很多时，也得定义维护很多变量。<br>PubSub模式有助于解藕和代码组织，在React的组件通信时，推荐使用此方法。  </p><p>参考链接：<br><a href="http://www.alloyteam.com/2015/07/react-zu-jian-jian-tong-xin/" target="_blank" rel="noopener">react 组件间通信</a></p><h3 id="React中的state说明"><a href="#React中的state说明" class="headerlink" title="React中的state说明"></a>React中的state说明</h3><ul><li>哪些组件应该有 State？<br>大部分组件的工作应该是从 props 里取数据并渲染出来。但是，有时需要对用户输入、服务器请求或者时间变化等作出响应，这时才需要使用 State。<br>尝试把尽可能多的组件无状态化。 这样做能隔离 state，把它放到最合理的地方，也能减少冗余，同时易于解释程序运作过程。常用的模式是创建多个只负责渲染数据的无状态（stateless）组件，在它们的上层创建一个有状态（stateful）组件并把它的状态通过 props 传给子级。这个有状态的组件封装了所有用户的交互逻辑，而这些无状态组件则负责声明式地渲染数据。</li><li><p>哪些 应该 作为 State？<br>State 应该包括那些可能被组件的事件处理器改变并触发用户界面更新的数据。 真实的应用中这种数据一般都很小且能被 JSON 序列化。当创建一个状态化的组件时，想象一下表示它的状态最少需要哪些数据，并只把这些数据存入 this.state。在 render() 里再根据 state 来计算你需要的其它数据。你会发现以这种方式思考和开发程序最终往往是正确的，因为如果在 state 里添加冗余数据或计算所得数据，需要你经常手动保持数据同步，不能让 React 来帮你处理。</p></li><li><p>哪些 不应该 作为 State？<br>this.state 应该仅包括能表示用户界面状态所需的最少数据。因此，它不应该包括：</p></li><li>计算所得数据： 不要担心根据 state 来预先计算数据 —— 把所有的计算都放到render() 里更容易保证用户界面和数据的一致性。例如，在 state 里有一个数组（listItems），我们要把数组长度渲染成字符串， 直接在 render() 里使用this.state.listItems.length + ‘ list items’ 比把它放到 state 里好的多。</li><li>React 组件： 在 render() 里使用当前 props 和 state 来创建它。</li><li>基于 props 的重复数据： 尽可能使用 props 来作为惟一数据来源。把 props 保存到 state 的一个有效的场景是需要知道它以前值的时候，因为未来的 props 可能会变化。</li></ul><h3 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h3><p>解决了react中处理state的问题<br>三大原则：<br>单一数据源<br>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。<br>State 是只读的<br>惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。<br>使用纯函数来执行修改<br>为了描述 action 如何改变 state tree ，你需要编写 reducers。Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state。</p><ul><li>Action<br>Action 是把数据从应用（译者注：这里之所以不叫 view 是因为这些数据有可能是服务器响应，用户输入或其它非 view 的数据 ）传到 store 的有效载荷。它是 store 数据的唯一来源。一般来说你会通过store.dispatch() 将 action 传到 store。</li><li>Reduce<br>Action 只是描述了有事情发生了这一事实，并没有指明应用如何更新 state。而这正是 reducer 要做的事情。<br>现在我们已经确定了 state 对象的结构，就可以开始开发 reducer。reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。</li></ul><p><img src="https://i.imgur.com/nr5cyQ5.png" alt="action"><br><code>combineReducers()</code> 所做的只是生成一个函数，这个函数来调用你的一系列 reducer，每个 reducer 根据它们的 key 来筛选出 state 中的一部分数据并处理，然后这个生成的函数再将所有 reducer 的结果合并成一个大的对象</p><ul><li>Store<br><img src="https://i.imgur.com/pCc8jKk.png" alt="store"></li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">阮一峰 react 入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>奇葩大会观后感</title>
      <link href="/2018/05/01/%E5%A5%87%E8%91%A9%E5%A4%A7%E4%BC%9A/"/>
      <url>/2018/05/01/%E5%A5%87%E8%91%A9%E5%A4%A7%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<p>奇葩大会给我带来的最大的感触应该是了解世界上有这么多不同性格的人存在，有这么多不一样的人生存在，这也是我喜欢看影视化作品的一个原因。<br>世界那么大，我有时候看到一个人的性格，他的处事风格，我都会想，这个人是经历了什么，会最终形成这样的一个个体。</p><p>最近最喜欢的两个词就是<code>LOVE AND PEACE</code> 和 <code>Respect</code>。<br>也不知道这两年经历了啥，<code>respect</code>是我觉得做人最最进本的品质。</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 娱乐 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>暗恋桃花源（话剧）观后感</title>
      <link href="/2018/04/04/%E6%9A%97%E6%81%8B%E6%A1%83%E8%8A%B1%E6%BA%90/"/>
      <url>/2018/04/04/%E6%9A%97%E6%81%8B%E6%A1%83%E8%8A%B1%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>从接触学校的极坐标开始，就开始喜欢上话剧，之后不知道从哪个报道里看到黄磊有排这部剧，那个时候的黄磊还是我心目中《橘子红了》里的那位，还没有拍出那部自导自演的电影，还有女神袁泉，想着一定要去瞅瞅，所以屏蔽了一切关于这部剧的剧情信息，之后无意看到金士杰和林青霞在其中的一段表演，再次加深了我要看这部剧的执念，奈何明星演出的票真的是太贵了，我等平民百姓实在是消费不起，遂选择专属版。</p><p>哦对，要说下这个舞台，这个舞台是圆形的~让我想起了老友记里Joey表演舞台剧的那个场景，可能话剧就是这样吧~ 是一种近距离的观察，那个感觉很奇妙。</p><p>可能之前看到的都是学校同学演的，演员刚开始开口的时候，我愣住了，音色真的超级好听，一开始还有点不太适应，有可能是时代背景的缘故，之后的台湾腔实在有那么一丢丢不太适应，但是很符合剧情~</p><p>因为看前完全不知道剧情是什么，想着可能是讲个暗恋的故事吧~~<br>之后才发现是两个故事的穿插，虽然不喜欢剧透，但下面的内容确实会剧透一些。</p><p>暗恋，可能更多的是执念，是遗憾，是责任吧~<br>在我的观念里， 执念这个东西，其实并没有期待很好的结果，只是期待个结果，有了结果才能放下。其实这个故事中，我更喜欢的角色是男主之后的老婆。</p><p>桃花源这个故事吧， 它是个喜剧，又是个悲剧吧~<br>这些年也不知道是咋个回事，喜剧这种东西，我都是抱着悲剧的心态来看，演员越努力的去制造笑点，我就会更加觉得有点悲剧。之前有句话说，喜剧演员不能不演喜剧，不然他们会更悲伤。(找不到原话了..）<br>这个桃花源不是我心目中理解的那个陶渊明先生心中的那个桃花源，所以表现手法这个东西是真的很好玩~~</p><p>说来也是惭愧，这部剧，不知道是自己的期待值太高，还是我不太能理解里面的故事，也有可能是我经历的太少，当然也可能是我文采太差，一直以来也不知道怎么去写这个故事，也不知道怎么表达我看完这个剧的想法。 就跟当年看完《恋爱的犀牛》一样有点不知所措。</p><p>但是期待了那么久，也算是圆了个梦，就写个画个句号吧~~</p>]]></content>
      
      
      <categories>
          
          <category> 话剧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 话剧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>透明人</title>
      <link href="/2018/04/03/%E9%80%8F%E6%98%8E%E4%BA%BA/"/>
      <url>/2018/04/03/%E9%80%8F%E6%98%8E%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>奇葩说下架了，有点难过，想着要给你写点什么，想着要记录下里面我见到的人和听到的故事，<br>知道原来这么大的世界，还有一批这样的人存在，<br>知道原来这么有趣的世界，还有这样一群有趣的人做着一些有趣的事，<br>想着原来人和人的思想可以这么不一样，但就是因为这么不一样，让我觉得很有趣</p><p>其实有时候为了记录而记录是件很矛盾的事情，我一直觉得如果一个有意思有意义的视频，你不安静的用心的去看，其实对它的一种不尊重，当然前提是这个视频真的是有意思有意义的，但是有意思和有意义又是一个很主观存在的事情，who cares？ 只要我这么觉得就好。</p><p>记得”年轻”的时候看《Flipped》, 看完后太有写影评的冲动了，为了写影评，我居然在一晚上又把电影过了一遍(当然也可能是年纪大了，记忆力不好）。第一遍看电影的时候，最主要的目的就是欣赏，就是纯看，看剧情，看表演，之后为了记录，再过一遍，也不算是不尊重这个电影，当然这个影评后来还拿了3等奖，这当然也是后话啦~</p><p>之后不知道怎么养成了”碎碎念”这个”坏”毛病，可能俗称”话痨”￣□￣｜｜, 看完一个有点感触的东西吧，就想写写，有的时候再观看的时候，你就会思考”我如果要写出来的话，这句话应该怎么说，应该怎么写，逻辑是否通顺，是否能把我想表达的表达出来”,这种略带功利心的状态，我并不喜欢，但是看完一遍后，你的真实感受真的是在看的那一刹那会产生的，之后可能就会忘了，所以会再看一次，现在也没有那么多心情去干这件事了，所以只能再备忘录上去记录，一些突然的”想法”。</p><p>好了，题外话也是结束了。那就切入正题了。</p><p>《透明人》 米未传媒旗下的另一个作品，展现的是一个群体的某个思想和状态，给我的最大感觉是“尊重”，思达表现的很好，传达给我的感觉是， 尊重每个群体的不同声音，没有对错，只是价值观的不同，存在即合理，当然在我这里，这一些都是有个大大大前提的，那就是不伤害任何人，必须得保有人最基本的善良。</p><p>这句话写在前面，我也别喜欢《透明人》 去捕捉人的眼神，眼神这种东西真的骗不了人。<br>我喜欢你，我的眼睛里都是星星<br>我想念你，我的眼睛里有是海洋<br>我欺骗你，我的眼睛里都是回避</p><p>《空巢老人疯狂学英语10年》专辑，老年人这个词语吧，这两年有点新感悟，前几年的时候觉得父母到了50多岁了，就应该退休养老享福了，但是真的当我看到国外那个92岁的老爷爷开车车载我的时候，我真的觉得老了也可以有自己的生活， 有自己的生活圈，关键真的在于自己怎么想的。 我十分的赞成父母那辈的在他们的阶段去过他们自己的人生，当然如果他们的人生是愿意替你照顾儿女，我觉得都是个人的选择，真的没有对错。 视频中思达问一个妈吗。“你以后愿意跟子女住一起吗”， 妈妈的回答是“还在考虑” ，我的理解是，我其实很想跟我的子女在一起生活的，但是我怕我们会产生矛盾， 我是愿意替你带孩子的，但是我怕我会没有自己的生活，世界那么大，麻麻也没有看过，你看麻麻也学会了点英语，麻麻一个人出了国也没有丢，你也不用担心麻麻， 最重要的是你要相信麻麻是爱你的。视频的最后，是一帮可爱的人对着镜头说英语，真的你会发现“努力的人超超超级可爱” </p><p>《那帮小演员》 …之后再写吧，不知道会不会记得现在的感悟</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 娱乐 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS居中</title>
      <link href="/2018/03/27/css%E5%B1%85%E4%B8%AD/"/>
      <url>/2018/03/27/css%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="水平居中-margin-0-auto"><a href="#水平居中-margin-0-auto" class="headerlink" title="水平居中 margin:0 auto"></a>水平居中 <code>margin:0 auto</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #ex2_container &#123; width:200px; height：300px; background-color:yellow; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#ex2_content</span> &#123;  <span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">margin</span>:<span class="number">0px</span> auto; <span class="attribute">background-color</span>:gray; <span class="attribute">color</span>:white; <span class="attribute">display</span>:table; &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex2_container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex2_content"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="水平垂直居中transform-translate-50-50"><a href="#水平垂直居中transform-translate-50-50" class="headerlink" title="水平垂直居中transform:translate(-50%,-50%)"></a>水平垂直居中<code>transform:translate(-50%,-50%)</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#ex3_container</span> &#123; <span class="attribute">width</span>:<span class="number">200px</span>; <span class="attribute">height</span>:<span class="number">200px</span>; <span class="attribute">background-color</span>:yellow; <span class="attribute">position</span>:relative; &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#ex3_content</span> &#123;<span class="attribute">height</span>:<span class="number">100px</span>; <span class="attribute">width</span>:<span class="number">120px</span>; <span class="attribute">left</span>:<span class="number">50%</span>; <span class="attribute">top</span>:<span class="number">50%</span>; <span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%); <span class="attribute">-webkit-transform</span>:<span class="built_in">translate</span>(-50%,-50%); <span class="attribute">background-color</span>:gray; <span class="attribute">color</span>:white; <span class="attribute">position</span>:absolute; &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex3_container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex3_content"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绝对定位居中"><a href="#绝对定位居中" class="headerlink" title="绝对定位居中"></a>绝对定位居中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#ex2_container</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 300px;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="undefined">  position: relative;</span></span><br><span class="line"><span class="css"><span class="comment">/*   text-align:center; */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-id">#ex2_content</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span><span class="selector-pseudo">:grey</span>;</span></span><br><span class="line"><span class="undefined">/* width: 50%;</span></span><br><span class="line"><span class="undefined">  height: 50%; */</span></span><br><span class="line"><span class="undefined">  overflow: auto;</span></span><br><span class="line"><span class="undefined">  margin: auto;</span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  top: 0; left: 0; bottom: 0;   right: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex2_container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex2_content"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用于mask-布局"><a href="#用于mask-布局" class="headerlink" title="用于mask 布局"></a>用于mask 布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#ex2_container</span>,<span class="selector-id">#is-Fixed</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">position</span><span class="selector-pseudo">:fixed</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span><span class="selector-pseudo">:yellow</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-id">#ex2_container</span> <span class="selector-id">#is-Fixed</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined"> */ width: 60%; </span></span><br><span class="line"><span class="undefined">  height: 60%;</span></span><br><span class="line"><span class="undefined">  min-width: 400px;</span></span><br><span class="line"><span class="undefined">  max-width: 500px;*/</span></span><br><span class="line"><span class="undefined">  overflow: auto;</span></span><br><span class="line"><span class="undefined">  margin: auto;</span></span><br><span class="line"><span class="undefined">  z-index: 999;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span><span class="selector-pseudo">:grey</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ex2_container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"is-Fixed"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参开文献"><a href="#参开文献" class="headerlink" title="参开文献"></a>参开文献</h3><p><a href="https://jinlong.github.io/2013/08/13/centering-all-the-directions/" target="_blank" rel="noopener">css居中大全</a></p><p><a href="https://www.w3cplus.com/css/vertically-center-content-with-css" target="_blank" rel="noopener">CSS制作水平垂直居中对齐</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World^_^</title>
      <link href="/2018/01/01/helloWorld/"/>
      <url>/2018/01/01/helloWorld/</url>
      
        <content type="html"><![CDATA[<p>对未知充满好奇<br>对回忆充满欣喜<br>对经历充满感恩</p><p>记录生活的点滴<br>思考看到的一切<br>感悟自己的人生</p><p>情怀和情节这种东西<br>懂的人自然就懂<br>不懂的人也就无所谓了</p><p>欢迎来到我的世界~~</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
